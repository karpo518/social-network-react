{"version":3,"file":"static/js/677.a0d67de4.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","webpack://my-app/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogItems\":\"Dialogs_dialogItems__VFpmc\",\"selectDialog\":\"Dialogs_selectDialog__ukFfu\",\"dialog\":\"Dialogs_dialog__htSTl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\",\"incoming\":\"Dialogs_incoming__8SLbR\",\"author\":\"Dialogs_author__0lkGo\",\"body\":\"Dialogs_body__6RDuF\",\"outgoing\":\"Dialogs_outgoing__-AWT8\",\"image\":\"Dialogs_image__wl+13\",\"name\":\"Dialogs_name__ThYtM\",\"form\":\"Dialogs_form__2diAn\"};","import { FC } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { TDialog } from \"../../../types/types\";\nimport s from \"./../Dialogs.module.css\";\nimport defaultPhoto from \"../../../assets/images/user.jpg\";\n\nconst DialogItem: FC<TDialog> = (props) => {\n  let path = `/dialogs/${props.id}`;\n  let image = props.photos.small || defaultPhoto\n  return (\n    <div className={s.dialog + \" \" + s.active}>\n      <div className={s.image} >\n        <img src={image} alt={'dialog img'} />\n      </div>\n      <div className={s.name}>\n        <NavLink to={path}>{props.userName}</NavLink>\n        {\n          props.newMessagesCount \n            ? <span className={s.newCount}>+{props.newMessagesCount}</span> \n            : ''\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import s from \"./../Dialogs.module.css\";\nimport defaultPhoto from \"../../../assets/images/user.jpg\";\nimport { FC } from \"react\";\nimport { TMessage } from \"../../../types/types\";\n\ntype TOtherProps = {\n  selectedId: number | null\n}\n\ntype TProps = TMessage & TOtherProps\n\nconst Message: FC<TProps> = (props) => {\n  \n  let ownershipClass = props.senderId === props.selectedId ? \"incoming\" : \"outgoing\";\n  return (\n    <div className={s.message + \" \" + s[ownershipClass]}>\n      <div className={s.author}>\n        <div className={s.image}>\n          <img src={defaultPhoto} alt={'default img'} />\n        </div>\n      </div>\n      <div className={s.body}>{props.body}</div>\n    </div>\n  );\n};\n\nexport default Message;\n","import { FC } from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { createField, InputArea } from \"../common/FormControls/FormControls\";\nimport { required, maxLength} from \"../../utils/validators/validators\";\nimport { TDialog, TMessage } from \"../../types/types\";\n\ntype TProps = {\n  selectedId: number | null\n  dialogs: Array<TDialog>\n  messages: Array<TMessage>\n  newDialog: TDialog | null\n  sendMessage: (userId: number, formData: TFormData) => void\n}\n\nconst Dialogs: FC<TProps> = (props) => {\n  const onSubmit = (formData: any) => {\n    if(props.selectedId !== null) { \n      props.sendMessage(props.selectedId, formData)\n    }\n  }\n\n  let allDialogs = props.newDialog === null ? props.dialogs : [props.newDialog, ...props.dialogs]\n\n  let dialogsElements = allDialogs.map((d: TDialog) => {\n        return <DialogItem key={d.id} {...d} />\n    }\n  )\n\n  let messagesElements = props.messages.map((m: TMessage) => {\n      return (\n        <Message {...m} selectedId={props.selectedId} />\n      )\n  })\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogItems}>{dialogsElements}</div>\n      {\n        props.selectedId \n          ? <div className={s.messages}>\n              <div className={s.list}>{messagesElements}</div>\n              <AddMessageFormRedux onSubmit={onSubmit} userId={props.selectedId} />\n            </div>\n          : <div className={s.selectDialog} >Please, select dialog!</div>\n      }\n    </div>\n  );\n};\n\nlet maxLength300 = maxLength(300)\n\ntype TFormData = {\n  body: string\n}\n\ntype TOwnProps = {\n  userId: number\n  onSubmit: (formData: any) => void\n}\n\ntype TFormProps = TOwnProps & InjectedFormProps<TFormData,TOwnProps>\n\nconst AddMessageForm: FC<TFormProps> = (props) => {\n\n  return (\n    <form onSubmit={props.handleSubmit} className={s.form}>\n      <div className=\"title\">Send message</div>\n      { createField<TFormData>('Write your message here..', 'body', [required, maxLength300], InputArea, {fieldType: 'textarea'}) }\n      <div>\n        <button className={s.submit} >Send</button>\n      </div>\n    </form>\n  );\n};\n\nconst AddMessageFormRedux = reduxForm<TFormData, TOwnProps>({ form: \"DialogsAddMessageForm\" })(AddMessageForm);\n\nexport default Dialogs;\n","import { TAppState } from './../redux/redux-store';\nimport { ComponentType } from \"react\";\nimport { connect } from \"react-redux\"\nimport { Navigate } from \"react-router-dom\"\n\n\nlet mapStateToPropsForRedirect = (state: TAppState): TProps => ({\n    isAuth: state.auth.isAuth\n});\n\ntype TProps = {\n    isAuth: boolean\n}\n\nexport const withAuthRedirect = (Component: ComponentType<any>) => {\n\n\n    let RedirectComponent:ComponentType<any> = (props) => {\n\n        let {isAuth, ...restProps} = props\n\n        if(!props.isAuth) return <Navigate to={'/login'} />\n\n        return <Component {...restProps} />\n    }\n    \n    let ConnectedRedirectComponent = connect<TProps, {}, {}, TAppState>(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedRedirectComponent\n}","import Dialogs from \"./Dialogs\";\nimport {\n  getDialogs,\n  getMessages,\n  sendMessage,\n  createNewDialog,\n  DialogsAC,\n} from \"../../redux/dialogs-reducer\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport { useParams } from \"react-router-dom\";\nimport { ComponentType, FC, useEffect } from \"react\";\nimport { TDialog, TMessage } from \"../../types/types\";\nimport { TAuthState } from \"../../redux/auth-reducer\";\nimport { TAppState } from \"../../redux/redux-store\";\n\ntype TMapStateToProps = {\n  dialogs: Array<TDialog>\n  messages: Array<TMessage>\n  selectedId: number | null,\n  newDialog: TDialog | null,\n  auth: TAuthState,\n}\n\ntype TMapDispatchToProps = {\n  getDialogs: (selectedUserId: number) => void\n  createNewDialog: (userId: number) => void\n  resetNewDialog: () => void\n  getMessages: (userId: number) => void\n  sendMessage: (userId: number, formData: any) => void\n  setSelectedDialog: (userId: number) => void\n}\n\ntype TProps = TMapStateToProps & TMapDispatchToProps\n\nexport const DialogsContainer: FC<TProps> = (props) => {\n  \n  const params = useParams();\n\n  let selectedId = params.userId ? parseInt(params.userId) : 0;\n\n  let [setSelectedDialog, getDialogs, getMessages] = [props.setSelectedDialog, props.getDialogs, props.getMessages]\n\n  useEffect(() => {\n    setSelectedDialog(selectedId)\n    getDialogs(selectedId)\n    getMessages(selectedId)\n  }, [selectedId, setSelectedDialog, getDialogs, getMessages])\n\n  useEffect(() => {\n\n        let timerId = setInterval(() => { \n          getDialogs(selectedId)\n          getMessages(selectedId)\n        }, 15000)\n\n        return () => {\n          clearTimeout(timerId);\n        }\n  }, [selectedId, setSelectedDialog, getDialogs, getMessages])      \n\n  return (\n    <Dialogs\n      dialogs={props.dialogs}\n      newDialog={props.newDialog}\n      messages={props.messages}\n      selectedId={props.selectedId}\n      sendMessage={props.sendMessage}\n    />\n  );\n};\n\nlet mapStateToProps = (state: TAppState): TMapStateToProps => {\n  return {\n    dialogs: state.dialogsPage.dialogs,\n    messages: state.dialogsPage.messages,\n    selectedId: state.dialogsPage.selectedId,\n    newDialog: state.dialogsPage.newDialog,\n    auth: state.auth,\n  };\n};\n\nlet mapDispatchToProps = {\n  getDialogs,\n  createNewDialog,\n  resetNewDialog: DialogsAC.resetNewDialog,\n  getMessages,\n  sendMessage,\n  setSelectedDialog: DialogsAC.setSelectedDialog\n}\n\nexport default compose<ComponentType>(\n  withAuthRedirect,\n  connect<TMapStateToProps, TMapDispatchToProps, TProps, TAppState>(mapStateToProps, mapDispatchToProps),\n)(DialogsContainer);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkboxControl\":\"FormControls_checkboxControl__33VzZ\",\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"errorText\":\"FormControls_errorText__5Si0-\",\"fieldWrap\":\"FormControls_fieldWrap__e7QgK\",\"labelCheckboxWrap\":\"FormControls_labelCheckboxWrap__kXX0d\",\"labelTextWrap\":\"FormControls_labelTextWrap__nPV0n\"};","import { Component, FC } from 'react';\nimport { Field, WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\nimport { NestedKeyOf } from '../../../types/types';\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\nimport s from \"./FormControls.module.css\";\n\ntype PropsType = {\n  input: WrappedFieldInputProps\n  meta: WrappedFieldMetaProps\n  fieldType: string\n  id?: string\n  label?: string \n  type: 'textarea' | 'input' | 'checkbox' \n}\n\nexport const InputArea: FC<PropsType> = ({ input, meta: {touched, error}, fieldType, ...props }) => {\n  const hasError = touched && error;\n  return (\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n      {props.label && props.type !== \"checkbox\" && (\n        <div className={`${s.labelTextWrap}`}>\n          <label htmlFor={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n      \n      <div className={s.fieldWrap}>\n        {fieldType === \"input\" ? (\n          <input {...input} {...props} />\n        ) : (\n          <textarea {...input} {...props} />\n        )}\n      </div>\n      {props.label && props.type === \"checkbox\" && (\n        <div className={s.labelCheckboxWrap}>\n          <label htmlFor={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n\n      {hasError ? (\n        <div className={s.errorText}>\n          <span>{error}</span>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport function  createField<TFormData extends object>(\n  placeholder: string | null,\n  name: NestedKeyOf<TFormData>,\n  validators: Array<FieldValidatorType>,\n  component: string | Component<any,any,any> | FC<any>,\n  props: any\n)\n{\n  let wrapClasses = props.wrapClasses || \"\";\n\n  if (props.type && props.type === \"checkbox\") {\n    wrapClasses += s.checkboxControl;\n  }\n\n  return (\n    <div className={wrapClasses}>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n    </div>\n  );\n};\n","export type FieldValidatorType = (field: string) => string | undefined\n\nexport const required: FieldValidatorType = (value: string): string | undefined => {\n    if(value && value !== '') {\n        return undefined\n    }\n\n    return 'It is required field!'\n}\n\nexport const maxLength = (maxLengthValue: number): FieldValidatorType => {\n    return (value) => {\n        if(value && value.length > maxLengthValue) {\n            return `You have exceeded the maximum message length(${maxLengthValue})`\n        }\n        \n        return undefined\n    }\n}"],"names":["props","path","id","image","photos","small","defaultPhoto","className","s","src","alt","to","userName","newMessagesCount","ownershipClass","senderId","selectedId","body","maxLength300","maxLength","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","InputArea","fieldType","dialogsElements","newDialog","dialogs","map","d","messagesElements","messages","m","formData","sendMessage","userId","mapStateToPropsForRedirect","state","isAuth","auth","DialogsContainer","params","useParams","parseInt","setSelectedDialog","getDialogs","getMessages","useEffect","timerId","setInterval","clearTimeout","mapDispatchToProps","createNewDialog","resetNewDialog","DialogsAC","compose","Component","connect","restProps","dialogsPage","input","meta","touched","error","hasError","label","type","htmlFor","placeholder","name","validators","component","wrapClasses","Field","validate","value","maxLengthValue","length"],"sourceRoot":""}