{"version":3,"file":"static/js/443.35143896.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.tsx","redux/chat-selectors.ts","webpack://my-app/./src/components/Chat/Chat.module.css?f66a","components/Chat/AddMessageForm.tsx","utils/popup-helpers.js","components/Chat/Messages.tsx","components/Chat/Chat.tsx","pages/Chat/ChatPage.tsx","redux/profile-selectors.ts","utils/hooks/useRequireAuth.ts","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"checkboxControl\":\"FormControls_checkboxControl__33VzZ\",\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"errorText\":\"FormControls_errorText__5Si0-\",\"fieldWrap\":\"FormControls_fieldWrap__e7QgK\",\"labelCheckboxWrap\":\"FormControls_labelCheckboxWrap__kXX0d\",\"labelTextWrap\":\"FormControls_labelTextWrap__nPV0n\"};","import { Checkbox, Input } from 'antd';\nimport TextArea from 'antd/lib/input/TextArea';\nimport { Component, FC } from 'react';\nimport { Field, WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\nimport { NestedKeyOf } from '../../../types/types';\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\nimport s from \"./FormControls.module.css\";\nimport { Field as FormikField, FieldProps } from \"formik\";\n\ntype PropsType = {\n  input: WrappedFieldInputProps\n  meta: WrappedFieldMetaProps\n  fieldType: string\n  id?: string\n  label?: string \n  type: 'textarea' | 'input' | 'checkbox' \n}\n\nexport const InputArea: FC<PropsType> = ({ input, meta: {touched, error}, fieldType, ...props }) => {\n  const hasError = touched && error;\n  return (\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n      {props.label && props.type !== \"checkbox\" && (\n        <div className={`${s.labelTextWrap}`}>\n          <label htmlFor={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n      \n      <div className={s.fieldWrap}>\n        {fieldType === \"input\" \n         ? props.type === \"checkbox\" \n              ? <Checkbox  {...input} {...props} >{props.label}</Checkbox> \n              : <Input {...input} {...props} />\n         : (\n          <TextArea {...input} {...props} />\n        )}\n      </div>\n\n      {hasError ? (\n        <div className={s.errorText}>\n          <span>{error}</span>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport function  createField<TFormData extends object>(\n  placeholder: string | null,\n  name: NestedKeyOf<TFormData>,\n  validators: Array<FieldValidatorType>,\n  component: string | Component<any,any,any> | FC<any>,\n  props: any\n)\n{\n  let wrapClasses = props.wrapClasses || \"\";\n\n  if (props.type && props.type === \"checkbox\") {\n    wrapClasses += s.checkboxControl;\n  }\n\n  return (\n    <div className={wrapClasses}>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n    </div>\n  );\n};\n\ntype FormikPropsType = {\n  fieldType: string\n  id?: string\n  label?: string \n  type: 'textarea' | 'input' | 'checkbox' \n}\n\n\n\nexport const FormikInputArea: FC<FormikPropsType & FieldProps> = ({ field, form: {touched, errors}, fieldType, ...props }) => {\n  const hasError = touched[field.name] && errors[field.name]\n  return (\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n      {props.label && props.type !== \"checkbox\" && (\n        <div className={`${s.labelTextWrap}`}>\n          <label htmlFor={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n      \n      <div className={s.fieldWrap}>\n        {fieldType === \"input\" \n         ? props.type === \"checkbox\" \n              ? <Checkbox  {...field} {...props} >{props.label}</Checkbox> \n              : <Input {...field} {...props} />\n         : (\n          <TextArea {...field} {...props} />\n        )}\n      </div>\n\n      {touched[field.name] && errors[field.name] &&  (\n        <div className={s.errorText}>\n          <p>{ errors[field.name]?.toString() }</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\n\nexport function  createFormikField<TFormData extends object>(\n  placeholder: string | null,\n  name: NestedKeyOf<TFormData>,\n  validators: Array<FieldValidatorType>,\n  component: string | Component<any,any,any> | FC<any>,\n  props: any\n)\n{\n  let wrapClasses = props.wrapClasses || \"\";\n\n  if (props.type && props.type === \"checkbox\") {\n    wrapClasses += s.checkboxControl;\n  }\n\n  return (\n    <div className={wrapClasses}>\n      <FormikField\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n    </div>\n  );\n};","import { TAppState } from './redux-store';\n\nexport const SGetMessages = (state: TAppState) => {\n    return  state.chat.messages;\n}\n\nexport const SGetStatus = (state: TAppState) => {\n    return  state.chat.status;\n}","// extracted by mini-css-extract-plugin\nexport default {\"submitWrap\":\"Chat_submitWrap__X9GjQ\",\"messages\":\"Chat_messages__UMxjL\",\"message\":\"Chat_message__ySW5b\",\"formWrap\":\"Chat_formWrap__bLwHc\"};","import { Button } from \"antd\";\nimport { Form, Formik, FormikHelpers } from \"formik\";\nimport { FC, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { chatAPI } from \"../../api/chat-api\";\nimport { chatAC, sendMessage, TChatActions, TWsStatus } from \"../../redux/chat-reducer\";\nimport { SGetStatus } from \"../../redux/chat-selectors\";\nimport { TAppState } from \"../../redux/redux-store\";\nimport { showPopup } from \"../../utils/popup-helpers\";\nimport { required } from \"../../utils/validators/validators\";\nimport { createFormikField, FormikInputArea } from \"../common/FormControls/FormControls\";\nimport s from './Chat.module.css';\n\ntype TFormData = {\n    message: string\n}\n\nexport const AddMessageForm: FC = () => {\n\n  const dispatch = useDispatch<ThunkDispatch<TAppState, unknown, TChatActions>>();\n\n  const status = useSelector(SGetStatus)\n\n  const submitHandler = (values: TFormData, helpers: FormikHelpers<TFormData> ) => {\n\n    if(status === WebSocket.OPEN) {\n      dispatch(sendMessage(values.message))\n      helpers.setSubmitting(false);\n      helpers.resetForm()\n    }\n    else {\n      showPopup('Не удалось отправить сообщение, так как не удаётся подключиться к серверу!')\n    }\n  }\n\n  const changeWsStatusHandler= (newStatus: TWsStatus) => {\n      dispatch(chatAC.setStatus(newStatus))\n  }\n\n  useEffect(() => {\n    let unsubscribe = chatAPI.subscribe('statusChanged', changeWsStatusHandler)\n    return () => { unsubscribe() }\n  });\n  \n  return (\n    <div className={s.formWrap} >\n        <h2>Send message</h2>\n        <Formik initialValues={ {message: ''} } onSubmit={submitHandler}  >\n          {\n            ({values, setSubmitting, resetForm}) => (\n                <Form onKeyDown={(e) => {\n                  if (e.key === 'Enter') {\n                    e.preventDefault()\n                    submitHandler(values, {setSubmitting, resetForm} as FormikHelpers<TFormData> );\n                    //props.submitForm()\n                  }\n                }} >\n                    <div>\n                    { createFormikField<TFormData>('Write text here..', 'message', [required], FormikInputArea, {fieldType: 'textarea'}) }\n                    </div>\n                    <div className={s.submitWrap} >\n                        <Button disabled={status !== WebSocket.OPEN} type=\"primary\" htmlType=\"submit\">Send</Button>\n                    </div>\n                </Form>\n            )\n        }\n        </Formik>\n    </div>\n  );\n};","export const showPopup = (message) => {\n    new Promise((resolve, reject) => { reject({message: message}) })\n}","import { Avatar } from \"antd\";\nimport { FC, useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport defaultPhoto from \"../../assets/images/user.jpg\";\nimport { SGetMessages } from \"../../redux/chat-selectors\";\nimport s from './Chat.module.css';\n\nexport const Messages: FC= () => {\n\n  const chatBottomRef = useRef<null | HTMLDivElement>(null)\n\n  const messages = useSelector(SGetMessages)\n\n  useEffect(() => {\n    chatBottomRef.current?.scrollIntoView({behavior: 'smooth'})\n  }, [chatBottomRef, messages])\n\n  return (\n    <div className={s.messages}>\n        {messages.map((m: TChatMessage, index: number) => (\n          <Message key={index} {...m} />\n        ))}\n        <div className={s.chatBottom} ref={chatBottomRef}></div>\n    </div>\n  );\n};\n\nexport type TChatMessage = {\n \n    userId: number\n    userName: string\n    photo: string | null\n    message: string\n}\n\nexport const Message: FC<TChatMessage> = (props) => {\n    const userPhoto = props.photo || defaultPhoto\n    return (\n      <div className={s.message}>\n        <div className={s.messageHead}>\n          <Avatar src={userPhoto} />{\" \"}\n          <span className={s.userName}>{props.userName}</span>\n        </div>\n        <div className={s.messageBody}>{props.message}</div>\n      </div>\n    );\n};","import { FC, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { startMessagesListening, stopMessagesListening, TChatActions } from \"../../redux/chat-reducer\";\nimport { TAppState } from \"../../redux/redux-store\";\nimport { AddMessageForm } from \"./AddMessageForm\";\nimport { Messages } from \"./Messages\";\n\nexport const Chat: FC = () => {\n\n  const dispatch = useDispatch<ThunkDispatch<TAppState, unknown, TChatActions>>()\n\n  useEffect(() => {\n    \n    dispatch(startMessagesListening())\n\n    return () => { \n      dispatch(stopMessagesListening())\n    }\n\n  },[dispatch])\n\n  return (\n    <div>\n      <Messages />\n      <AddMessageForm />\n    </div>\n  );\n};","import { FC } from \"react\";\nimport { Chat } from \"../../components/Chat/Chat\";\nimport { useRequireAuth } from \"../../utils/hooks/useRequireAuth\";\n\nexport const ChatPage: FC = () => {\n    useRequireAuth()\n    return (\n        <div>\n            <h1>Chat</h1>\n            <Chat />\n        </div>\n  );\n};\n","import { TAppState } from './redux-store';\n\nexport const  sGetProfile = (state: TAppState) => {\n    return state.profilePage.profile\n}\n\nexport const  sGetStatus = (state: TAppState) => {\n    return state.profilePage.status\n}\n\nexport const sGetAuth = (state: TAppState) => {\n    return state.auth\n}","import { useSelector } from 'react-redux';\n// Hook (use-require-auth.js)\nimport { useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { sGetAuth } from '../../redux/profile-selectors';\n\n\n\nexport const useRequireAuth = (redirectUrl = '/login') => {\n  const auth = useSelector(sGetAuth);\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    if (auth.isAuth === false) {\n      return navigate(redirectUrl);\n    }\n  }, [auth, navigate, redirectUrl]);\n\n  return auth;\n}","export type FieldValidatorType = (field: string) => string | undefined\n\nexport const required: FieldValidatorType = (value: string): string | undefined => {\n    if(value && value !== '') {\n        return undefined\n    }\n\n    return 'It is required field!'\n}\n\nexport const maxLength = (maxLengthValue: number): FieldValidatorType => {\n    return (value) => {\n        if(value && value.length > maxLengthValue) {\n            return `You have exceeded the maximum message length(${maxLengthValue})`\n        }\n        \n        return undefined\n    }\n}"],"names":["InputArea","input","meta","touched","error","fieldType","props","hasError","className","s","label","type","htmlFor","id","TextArea","createField","placeholder","name","validators","component","wrapClasses","Field","validate","FormikInputArea","field","form","errors","toString","createFormikField","SGetMessages","state","chat","messages","SGetStatus","status","AddMessageForm","dispatch","useDispatch","useSelector","submitHandler","values","helpers","message","WebSocket","OPEN","sendMessage","setSubmitting","resetForm","Promise","resolve","reject","changeWsStatusHandler","newStatus","chatAC","useEffect","unsubscribe","chatAPI","initialValues","onSubmit","onKeyDown","e","key","preventDefault","required","disabled","htmlType","Messages","chatBottomRef","useRef","current","scrollIntoView","behavior","map","m","index","Message","ref","userPhoto","photo","defaultPhoto","src","userName","Chat","startMessagesListening","stopMessagesListening","ChatPage","useRequireAuth","sGetProfile","profilePage","profile","sGetStatus","sGetAuth","auth","redirectUrl","navigate","useNavigate","isAuth","value","maxLength","maxLengthValue","length"],"sourceRoot":""}