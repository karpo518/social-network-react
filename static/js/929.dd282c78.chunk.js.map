{"version":3,"file":"static/js/929.dd282c78.chunk.js","mappings":"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","sources":["../node_modules/rc-switch/es/index.js","../node_modules/antd/es/switch/index.js","redux/dialogs-selectors.ts","webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","webpack://my-app/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.tsx","utils/validators/validators.ts"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport KeyCode from \"rc-util/es/KeyCode\";\nvar Switch = React.forwardRef(function (_ref, ref) {\n  var _classNames;\n\n  var _ref$prefixCls = _ref.prefixCls,\n      prefixCls = _ref$prefixCls === void 0 ? 'rc-switch' : _ref$prefixCls,\n      className = _ref.className,\n      checked = _ref.checked,\n      defaultChecked = _ref.defaultChecked,\n      disabled = _ref.disabled,\n      loadingIcon = _ref.loadingIcon,\n      checkedChildren = _ref.checkedChildren,\n      unCheckedChildren = _ref.unCheckedChildren,\n      onClick = _ref.onClick,\n      onChange = _ref.onChange,\n      onKeyDown = _ref.onKeyDown,\n      restProps = _objectWithoutProperties(_ref, [\"prefixCls\", \"className\", \"checked\", \"defaultChecked\", \"disabled\", \"loadingIcon\", \"checkedChildren\", \"unCheckedChildren\", \"onClick\", \"onChange\", \"onKeyDown\"]);\n\n  var _useMergedState = useMergedState(false, {\n    value: checked,\n    defaultValue: defaultChecked\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      innerChecked = _useMergedState2[0],\n      setInnerChecked = _useMergedState2[1];\n\n  function triggerChange(newChecked, event) {\n    var mergedChecked = innerChecked;\n\n    if (!disabled) {\n      mergedChecked = newChecked;\n      setInnerChecked(mergedChecked);\n      onChange === null || onChange === void 0 ? void 0 : onChange(mergedChecked, event);\n    }\n\n    return mergedChecked;\n  }\n\n  function onInternalKeyDown(e) {\n    if (e.which === KeyCode.LEFT) {\n      triggerChange(false, e);\n    } else if (e.which === KeyCode.RIGHT) {\n      triggerChange(true, e);\n    }\n\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);\n  }\n\n  function onInternalClick(e) {\n    var ret = triggerChange(!innerChecked, e); // [Legacy] trigger onClick with value\n\n    onClick === null || onClick === void 0 ? void 0 : onClick(ret, e);\n  }\n\n  var switchClassName = classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-checked\"), innerChecked), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _classNames));\n  return React.createElement(\"button\", Object.assign({}, restProps, {\n    type: \"button\",\n    role: \"switch\",\n    \"aria-checked\": innerChecked,\n    disabled: disabled,\n    className: switchClassName,\n    ref: ref,\n    onKeyDown: onInternalKeyDown,\n    onClick: onInternalClick\n  }), loadingIcon, React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-inner\")\n  }, innerChecked ? checkedChildren : unCheckedChildren));\n});\nSwitch.displayName = 'Switch';\nexport default Switch;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport classNames from 'classnames';\nimport RcSwitch from 'rc-switch';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport SizeContext from '../config-provider/SizeContext';\nimport warning from '../_util/warning';\nimport Wave from '../_util/wave';\nvar Switch = /*#__PURE__*/React.forwardRef(function (_a, ref) {\n  var _classNames;\n\n  var customizePrefixCls = _a.prefixCls,\n      customizeSize = _a.size,\n      customDisabled = _a.disabled,\n      loading = _a.loading,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      props = __rest(_a, [\"prefixCls\", \"size\", \"disabled\", \"loading\", \"className\"]);\n\n  process.env.NODE_ENV !== \"production\" ? warning('checked' in props || !('value' in props), 'Switch', '`value` is not a valid prop, do you mean `checked`?') : void 0;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var size = React.useContext(SizeContext); // ===================== Disabled =====================\n\n  var disabled = React.useContext(DisabledContext);\n  var mergedDisabled = customDisabled || disabled || loading;\n  var prefixCls = getPrefixCls('switch', customizePrefixCls);\n  var loadingIcon = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-handle\")\n  }, loading && /*#__PURE__*/React.createElement(LoadingOutlined, {\n    className: \"\".concat(prefixCls, \"-loading-icon\")\n  }));\n  var classes = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-small\"), (customizeSize || size) === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-loading\"), loading), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames), className);\n  return /*#__PURE__*/React.createElement(Wave, {\n    insertExtraNode: true\n  }, /*#__PURE__*/React.createElement(RcSwitch, _extends({}, props, {\n    prefixCls: prefixCls,\n    className: classes,\n    disabled: mergedDisabled,\n    ref: ref,\n    loadingIcon: loadingIcon\n  })));\n});\nSwitch.__ANT_SWITCH = true;\n\nif (process.env.NODE_ENV !== 'production') {\n  Switch.displayName = 'Switch';\n}\n\nexport default Switch;","import { TAppState } from './redux-store';\n\nexport const sGetSelectedUsername = (state: TAppState) => {\n    const selectedId = state.dialogsPage.selectedId\n    const selectedDialog =   state.dialogsPage.dialogs.find((el => el.id === selectedId))\n    return selectedDialog ? selectedDialog.userName : undefined \n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogItems\":\"Dialogs_dialogItems__VFpmc\",\"selectDialog\":\"Dialogs_selectDialog__ukFfu\",\"dialog\":\"Dialogs_dialog__htSTl\",\"selectDialogMode\":\"Dialogs_selectDialogMode__KS22B\",\"mobileTitle\":\"Dialogs_mobileTitle__JBZ-q\",\"username\":\"Dialogs_username__TzJ+p\",\"active\":\"Dialogs_active__t8cjl\",\"dialogListHead\":\"Dialogs_dialogListHead__VpNF+\",\"name\":\"Dialogs_name__ThYtM\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\",\"body\":\"Dialogs_body__6RDuF\",\"outgoing\":\"Dialogs_outgoing__-AWT8\",\"image\":\"Dialogs_image__wl+13\",\"form\":\"Dialogs_form__2diAn\"};","import { FC } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { TDialog } from \"../../../types/types\";\nimport s from \"./../Dialogs.module.css\";\nimport defaultPhoto from \"../../../assets/images/user.jpg\";\nimport cn from \"classnames\"; \n\nconst DialogItem: FC<TDialog> = ({id, \n                                  userName, \n                                  hasNewMessages, \n                                  lastDialogActivityDate, \n                                  lastUserActivityDate,\n                                  newMessagesCount, \n                                  photos,\n                                  selectedId}) => {\n  let path = `/dialogs/${id}`;\n  let image = photos.small || defaultPhoto\n  return (\n    <div className={ cn(s.dialog, {[s.active]: id === selectedId }) }>\n      <div className={s.image} >\n        <img src={image} alt={'dialog img'} />\n      </div>\n      <div className={s.name}>\n        <NavLink to={path}>{userName}</NavLink>\n        {\n          newMessagesCount \n            ? <span className={s.newCount}>+{newMessagesCount}</span> \n            : ''\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import s from \"./../Dialogs.module.css\";\nimport defaultPhoto from \"../../../assets/images/user.jpg\";\nimport { FC } from \"react\";\nimport { TMessage } from \"../../../types/types\";\n\ntype TOtherProps = {\n  selectedId: number | null\n}\n\ntype TProps = TMessage & TOtherProps\n\nconst Message: FC<TProps> = (props) => {\n  \n  let ownershipClass = props.senderId === props.selectedId ? \"incoming\" : \"outgoing\";\n  return (\n    <div className={s.message + \" \" + s[ownershipClass]}>\n      <div className={s.author}>\n        <div className={s.image}>\n          <img src={defaultPhoto} alt={'default img'} />\n        </div>\n      </div>\n      <div className={s.body}>{props.body}</div>\n    </div>\n  );\n};\n\nexport default Message;\n","import { Button, Col, Row, Switch } from \"antd\";\nimport cn from \"classnames\";\nimport { FC, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { sGetSelectedUsername } from \"../../redux/dialogs-selectors\";\nimport { TDialog, TMessage } from \"../../types/types\";\nimport { maxLength, required } from \"../../utils/validators/validators\";\nimport { createField, InputArea } from \"../common/FormControls/FormControls\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport s from \"./Dialogs.module.css\";\nimport Message from \"./Message/Message\";\n\ntype TProps = {\n  selectedId: number | null\n  dialogs: Array<TDialog>\n  messages: Array<TMessage>\n  newDialog: TDialog | null\n  sendMessage: (userId: number, formData: TFormData) => void\n}\n\nconst Dialogs: FC<TProps> = ({selectedId, dialogs, messages, newDialog, sendMessage}) => {\n\n  let [selectDialogMode, setSelectDialogMode] = useState(!selectedId)\n\n  const onSubmit = (formData: any) => {\n    if(selectedId !== null) { \n      sendMessage(selectedId, formData)\n    }\n  }\n\n  useEffect(() =>{ \n    // Если selectedId изменился и при этом не равен null, значит выбран какой-то диалог.\n    // В этом случае нужно свернуть список диалогов на мобильных\n    if(selectedId) {\n      setSelectDialogMode(false)\n    }\n  }, [selectedId])\n\n\n  let allDialogs = newDialog === null ? dialogs : [newDialog, ...dialogs]\n\n  let dialogsElements = allDialogs.map((d: TDialog) => {\n        return <DialogItem key={d.id} selectedId={selectedId} {...d} />\n    }\n  )\n\n  let messagesElements = messages.map((m: TMessage) => {\n      return (\n        <Message {...m} selectedId={selectedId} />\n      )\n  })\n\n  const selectedUsername = useSelector(sGetSelectedUsername)\n\n  return (\n    <div className={s.dialogs}>\n      <h1>Сообщения</h1>\n      <Row>\n        <Col span={24} md={6} >\n          <div className={s.dialogListHead} >\n            Показать все диалоги <Switch checked={selectDialogMode} onChange={setSelectDialogMode} />\n\n            {!selectDialogMode && <div className={s.mobileTitle} >Диалог с <span className={s.username}>{selectedUsername}</span></div>}\n\n          </div>\n          <div className={cn(s.dialogItems, {[s.selectDialogMode]: selectDialogMode === true }) } >\n            {dialogsElements}\n          </div>\n        </Col>\n        <Col span={24}  md={18} >\n          {\n            selectedId \n              ? <div className={s.messages}>\n                  <div className={s.list}>{messagesElements}</div>\n                  <AddMessageFormRedux onSubmit={onSubmit} userId={selectedId} />\n                </div>\n              : <div className={s.selectDialog} >Please, select dialog!</div>\n          }\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nlet maxLength300 = maxLength(300)\n\ntype TFormData = {\n  body: string\n}\n\ntype TOwnProps = {\n  userId: number\n  onSubmit: (formData: any) => void\n}\n\ntype TFormProps = TOwnProps & InjectedFormProps<TFormData,TOwnProps>\n\nconst AddMessageForm: FC<TFormProps> = (props) => {\n\n  return (\n    <form onSubmit={props.handleSubmit} className={s.form}>\n      <div className=\"title\">Send message</div>\n      { createField<TFormData>('Write your message here..', 'body', [required, maxLength300], InputArea, {fieldType: 'textarea'}) }\n      <div className=\"submitBlock\">\n        <Button type=\"primary\" htmlType=\"submit\" >Send</Button>\n      </div>\n    </form>\n  );\n};\n\nconst AddMessageFormRedux = reduxForm<TFormData, TOwnProps>({ form: \"DialogsAddMessageForm\" })(AddMessageForm);\n\nexport default Dialogs;\n","import { TAppState } from './../redux/redux-store';\nimport { ComponentType } from \"react\";\nimport { connect } from \"react-redux\"\nimport { Navigate } from \"react-router-dom\"\n\n\nlet mapStateToPropsForRedirect = (state: TAppState): TProps => ({\n    isAuth: state.auth.isAuth\n});\n\ntype TProps = {\n    isAuth: boolean\n}\n\nexport const withAuthRedirect = (Component: ComponentType<any>) => {\n\n\n    let RedirectComponent:ComponentType<any> = (props) => {\n\n        let {isAuth, ...restProps} = props\n\n        if(!props.isAuth) return <Navigate to={'/login'} />\n\n        return <Component {...restProps} />\n    }\n    \n    let ConnectedRedirectComponent = connect<TProps, {}, {}, TAppState>(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedRedirectComponent\n}","import Dialogs from \"./Dialogs\";\nimport {\n  getDialogs,\n  getMessages,\n  sendMessage,\n  createNewDialog,\n  DialogsAC,\n} from \"../../redux/dialogs-reducer\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport { useParams } from \"react-router-dom\";\nimport { ComponentType, FC, useEffect } from \"react\";\nimport { TDialog, TMessage } from \"../../types/types\";\nimport { TAuthState } from \"../../redux/auth-reducer\";\nimport { TAppState } from \"../../redux/redux-store\";\n\ntype TMapStateToProps = {\n  dialogs: Array<TDialog>\n  messages: Array<TMessage>\n  selectedId: number | null,\n  newDialog: TDialog | null,\n  auth: TAuthState,\n}\n\ntype TMapDispatchToProps = {\n  getDialogs: (selectedUserId: number) => void\n  createNewDialog: (userId: number) => void\n  resetNewDialog: () => void\n  getMessages: (userId: number) => void\n  sendMessage: (userId: number, formData: any) => void\n  setSelectedDialog: (userId: number) => void\n}\n\ntype TProps = TMapStateToProps & TMapDispatchToProps\n\nexport const DialogsContainer: FC<TProps> = (props) => {\n  \n  const params = useParams();\n\n  let selectedId = params.userId ? parseInt(params.userId) : 0;\n\n  let [setSelectedDialog, getDialogs, getMessages] = [props.setSelectedDialog, props.getDialogs, props.getMessages]\n\n  useEffect(() => {\n    setSelectedDialog(selectedId)\n    getDialogs(selectedId)\n    getMessages(selectedId)\n  }, [selectedId, setSelectedDialog, getDialogs, getMessages])\n\n  useEffect(() => {\n\n        let timerId = setInterval(() => { \n          getDialogs(selectedId)\n          getMessages(selectedId)\n        }, 15000)\n\n        return () => {\n          clearTimeout(timerId);\n        }\n  }, [selectedId, setSelectedDialog, getDialogs, getMessages])      \n\n  return (\n    <Dialogs\n      dialogs={props.dialogs}\n      newDialog={props.newDialog}\n      messages={props.messages}\n      selectedId={props.selectedId}\n      sendMessage={props.sendMessage}\n    />\n  );\n};\n\nlet mapStateToProps = (state: TAppState): TMapStateToProps => {\n  return {\n    dialogs: state.dialogsPage.dialogs,\n    messages: state.dialogsPage.messages,\n    selectedId: state.dialogsPage.selectedId,\n    newDialog: state.dialogsPage.newDialog,\n    auth: state.auth,\n  };\n};\n\nlet mapDispatchToProps = {\n  getDialogs,\n  createNewDialog,\n  resetNewDialog: DialogsAC.resetNewDialog,\n  getMessages,\n  sendMessage,\n  setSelectedDialog: DialogsAC.setSelectedDialog\n}\n\nexport default compose<ComponentType>(\n  withAuthRedirect,\n  connect<TMapStateToProps, TMapDispatchToProps, TProps, TAppState>(mapStateToProps, mapDispatchToProps),\n)(DialogsContainer);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkboxControl\":\"FormControls_checkboxControl__33VzZ\",\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"errorText\":\"FormControls_errorText__5Si0-\",\"fieldWrap\":\"FormControls_fieldWrap__e7QgK\",\"labelCheckboxWrap\":\"FormControls_labelCheckboxWrap__kXX0d\",\"labelTextWrap\":\"FormControls_labelTextWrap__nPV0n\"};","import { Checkbox, Input } from 'antd';\nimport TextArea from 'antd/lib/input/TextArea';\nimport { Component, FC } from 'react';\nimport { Field, WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\nimport { NestedKeyOf } from '../../../types/types';\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\nimport s from \"./FormControls.module.css\";\nimport { Field as FormikField, FieldProps } from \"formik\";\n\ntype PropsType = {\n  input: WrappedFieldInputProps\n  meta: WrappedFieldMetaProps\n  fieldType: string\n  id?: string\n  label?: string \n  type: 'textarea' | 'input' | 'checkbox' \n}\n\nexport const InputArea: FC<PropsType> = ({ input, meta: {touched, error}, fieldType, ...props }) => {\n  const hasError = touched && error;\n  return (\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n      {props.label && props.type !== \"checkbox\" && (\n        <div className={`${s.labelTextWrap}`}>\n          <label htmlFor={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n      \n      <div className={s.fieldWrap}>\n        {fieldType === \"input\" \n         ? props.type === \"checkbox\" \n              ? <Checkbox  {...input} {...props} >{props.label}</Checkbox> \n              : <Input {...input} {...props} />\n         : (\n          <TextArea {...input} {...props} />\n        )}\n      </div>\n\n      {hasError ? (\n        <div className={s.errorText}>\n          <span>{error}</span>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport function  createField<TFormData extends object>(\n  placeholder: string | null,\n  name: NestedKeyOf<TFormData>,\n  validators: Array<FieldValidatorType>,\n  component: string | Component<any,any,any> | FC<any>,\n  props: any\n)\n{\n  let wrapClasses = props.wrapClasses || \"\";\n\n  if (props.type && props.type === \"checkbox\") {\n    wrapClasses += s.checkboxControl;\n  }\n\n  return (\n    <div className={wrapClasses}>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n    </div>\n  );\n};\n\ntype FormikPropsType = {\n  fieldType: string\n  id?: string\n  label?: string \n  type: 'textarea' | 'input' | 'checkbox' \n}\n\n\n\nexport const FormikInputArea: FC<FormikPropsType & FieldProps> = ({ field, form: {touched, errors}, fieldType, ...props }) => {\n  const hasError = touched[field.name] && errors[field.name]\n  return (\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n      {props.label && props.type !== \"checkbox\" && (\n        <div className={`${s.labelTextWrap}`}>\n          <label htmlFor={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n      \n      <div className={s.fieldWrap}>\n        {fieldType === \"input\" \n         ? props.type === \"checkbox\" \n              ? <Checkbox  {...field} {...props} >{props.label}</Checkbox> \n              : <Input {...field} {...props} />\n         : (\n          <TextArea {...field} {...props} />\n        )}\n      </div>\n\n      {touched[field.name] && errors[field.name] &&  (\n        <div className={s.errorText}>\n          <p>{ errors[field.name]?.toString() }</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\n\nexport function  createFormikField<TFormData extends object>(\n  placeholder: string | null,\n  name: NestedKeyOf<TFormData>,\n  validators: Array<FieldValidatorType>,\n  component: string | Component<any,any,any> | FC<any>,\n  props: any\n)\n{\n  let wrapClasses = props.wrapClasses || \"\";\n\n  if (props.type && props.type === \"checkbox\") {\n    wrapClasses += s.checkboxControl;\n  }\n\n  return (\n    <div className={wrapClasses}>\n      <FormikField\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n    </div>\n  );\n};","export type FieldValidatorType = (field: string) => string | undefined\n\nexport const required: FieldValidatorType = (value: string): string | undefined => {\n    if(value && value !== '') {\n        return undefined\n    }\n\n    return 'It is required field!'\n}\n\nexport const maxLength = (maxLengthValue: number): FieldValidatorType => {\n    return (value) => {\n        if(value && value.length > maxLengthValue) {\n            return `You have exceeded the maximum message length(${maxLengthValue})`\n        }\n        \n        return undefined\n    }\n}"],"names":["Switch","React","_ref","ref","_classNames","_ref$prefixCls","prefixCls","className","checked","defaultChecked","disabled","loadingIcon","checkedChildren","unCheckedChildren","onClick","onChange","onKeyDown","restProps","_objectWithoutProperties","_useMergedState","useMergedState","value","defaultValue","_useMergedState2","_slicedToArray","innerChecked","setInnerChecked","triggerChange","newChecked","event","mergedChecked","switchClassName","classNames","_defineProperty","concat","Object","assign","type","role","e","which","KeyCode","ret","displayName","__rest","s","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","_a","customizePrefixCls","customizeSize","size","customDisabled","loading","_a$className","props","_React$useContext","ConfigContext","getPrefixCls","direction","SizeContext","DisabledContext","mergedDisabled","LoadingOutlined","classes","Wave","insertExtraNode","RcSwitch","_extends","__ANT_SWITCH","sGetSelectedUsername","state","selectedId","dialogsPage","selectedDialog","dialogs","find","el","id","userName","undefined","newMessagesCount","hasNewMessages","lastDialogActivityDate","lastUserActivityDate","photos","path","image","small","defaultPhoto","cn","src","alt","to","ownershipClass","senderId","body","maxLength300","maxLength","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","InputArea","fieldType","htmlType","messages","newDialog","sendMessage","useState","selectDialogMode","setSelectDialogMode","useEffect","dialogsElements","map","d","messagesElements","m","selectedUsername","useSelector","span","md","formData","userId","mapStateToPropsForRedirect","isAuth","auth","DialogsContainer","params","useParams","parseInt","setSelectedDialog","getDialogs","getMessages","timerId","setInterval","clearTimeout","mapDispatchToProps","createNewDialog","resetNewDialog","DialogsAC","compose","Component","connect","input","meta","touched","error","hasError","label","htmlFor","TextArea","placeholder","name","validators","component","wrapClasses","Field","validate","FormikInputArea","field","errors","toString","createFormikField","maxLengthValue"],"sourceRoot":""}