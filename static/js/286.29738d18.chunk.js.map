{"version":3,"file":"static/js/286.29738d18.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://my-app/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.tsx","hoc/withAuthRedirect.js","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\",\"likesCount\":\"Post_likesCount__LXQiZ\"};","import s from \"./Post.module.css\";\nimport userPhoto from \"../../../../assets/images/user.jpg\";\nimport { FC } from \"react\";\nimport { TPost } from \"../../../../types/types\";\n\nconst Post: FC<TPost> = (props) => {\n\n  return (\n    <div className={s.item}>\n      <img src={userPhoto} alt={'author img'} />\n      {props.message}\n      <div>\n        <span className={s.likesCount} >{props.likesCount} like(s)</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n","import React, { FC } from \"react\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { TPost } from \"../../../types/types\";\nimport { maxLength, required } from \"../../../utils/validators/validators\";\nimport { createField, InputArea } from \"../../common/FormControls/FormControls\";\nimport s from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\n\nlet maxLength300 = maxLength(300)\n\ntype PropsType = {\n  posts: Array<TPost>\n  sendPost: (newPostBody: string) => void\n}\n\nconst MyPosts = React.memo<PropsType>((props) => {\n  \n  let postsElements = props.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount} /> );\n\n  let onSubmit = (formData: any) => {\n    props.sendPost(formData.newPostBody);  \n  };\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My Posts</h3>\n      <AddPostFormRedux onSubmit={onSubmit} />\n      <div className={s.posts}>\n         { postsElements }\n      </div>\n    </div>\n  );\n});\n\ntype FormDataType = {\n  newPostBody: string\n}\n\ntype OwnPropsType = {\n  onSubmit: (FormData: any) => void\n}\n\ntype FormPropsType = OwnPropsType & InjectedFormProps<FormDataType,OwnPropsType>\n\nconst AddPostForm: FC<FormPropsType> = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit} >\n\n      { createField<FormDataType>('Write your message here..', 'newPostBody', [required, maxLength300], InputArea, {fieldType: 'textarea'}) }\n\n      <div>\n        <button >Add post</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddPostFormRedux = reduxForm<FormDataType, OwnPropsType>({ form: \"ProfileAddPostForm\" })(AddPostForm);\n\nexport default MyPosts;\n","import { connect } from \"react-redux\";\nimport {profileAC, sendPost } from \"../../../redux/profile-reducer\";\nimport { AppStateType } from \"../../../redux/redux-store\";\nimport { TPost } from \"../../../types/types\";\nimport MyPosts from \"./MyPosts\";\n\ntype MapStatePropsType = {\n  posts: Array<TPost>\n  newPostText: string\n}\n\ntype MapDispatchPropsType = {\n  updateNewPostText: (newPostText: string) => void\n  sendPost: (formData: any) => void\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText\n  };\n}\n\nlet MapDispatchToProps = {\n  updateNewPostText: profileAC.updateNewPostText, \n  sendPost\n}\n\nconst MyPostsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType> (mapStateToProps, MapDispatchToProps) (MyPosts);\n\nexport default MyPostsContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"image\":\"ProfileInfo_image__Kkyc5\",\"avatar\":\"ProfileInfo_avatar__1VFcV\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"aboutItem\":\"ProfileInfo_aboutItem__J2FXl\",\"aboutTitle\":\"ProfileInfo_aboutTitle__zMikE\",\"contactsBlock\":\"ProfileInfo_contactsBlock__cVFdA\",\"contactList\":\"ProfileInfo_contactList__7p7ua\",\"description\":\"ProfileInfo_description__u7GZ5\",\"fullName\":\"ProfileInfo_fullName__3fR7R\",\"updateAvatarBtn\":\"ProfileInfo_updateAvatarBtn__PZG2t\",\"ownerImage\":\"ProfileInfo_ownerImage__bj3Hg\",\"startChatWrap\":\"ProfileInfo_startChatWrap__8wLSp\",\"profileDataForm\":\"ProfileInfo_profileDataForm__b+zKy\",\"form\":\"ProfileInfo_form__OSgA8\",\"fieldItem\":\"ProfileInfo_fieldItem__bAs7p\",\"editDataWrap\":\"ProfileInfo_editDataWrap__hRuvJ\",\"saveDataWrap\":\"ProfileInfo_saveDataWrap__ij-9O\",\"contactFieldWrap\":\"ProfileInfo_contactFieldWrap__-jneh\",\"errors\":\"ProfileInfo_errors__dIyFr\"};","import { FC } from \"react\";\nimport { Field, InjectedFormProps } from \"redux-form\";\nimport { reduxForm } from \"redux-form\";\nimport { TContacts, TProfile } from \"../../../types/types\";\nimport { createField, InputArea } from \"../../common/FormControls/FormControls\";\nimport s from \"./ProfileInfo.module.css\";\n\ntype FormDataType = TProfile\n\ntype ContactsNamesType = Array<keyof TContacts & string>\n\ntype OwnPropsType = {\n  profile: TProfile\n  initialValues: TProfile\n  onSubmit: (formData: any) => void\n}\n\ntype PropsType = OwnPropsType & InjectedFormProps<FormDataType,OwnPropsType>\n\nexport const ProfileDataForm: FC<PropsType> = (props) => {\n\n  let contacts  = Object.keys(props.profile.contacts) as ContactsNamesType\n  \n  return (\n    <form onSubmit={props.handleSubmit} className={`${s.form} ${s.profileDataForm}` }>\n      <div className={s.saveDataWrap}>\n        <button>Save</button>\n      </div>\n\n      {props.error && <div className={s.errors} > {props.error}</div>}\n\n      <div className={s.fieldItem}>\n      <Field name=\"fullName\" component=\"input\" type=\"text\" placeholder=\"Full Name\"/>\n      </div>\n\n      <div className={s.fieldItem}>\n        { createField<FormDataType>('About me', 'aboutMe', [], InputArea, {type: 'text', fieldType: 'textarea', 'label': 'About me'}) }\n      </div>\n\n      <div className={s.fieldItem}>\n      { createField<FormDataType>(null, \n                    'lookingForAJob', \n                    [], \n                    InputArea, \n                    {type: 'checkbox', fieldType: 'input', label: 'Looking for a job', 'id': 'lookingForAJob' } ) \n      }\n      </div>\n\n      <div className={s.fieldItem}>\n        { createField<FormDataType>('Details', 'lookingForAJobDescription', [], InputArea, {type: 'text', fieldType: 'textarea', 'label': 'My professional skills'}) }\n      </div>\n      <div className={s.aboutItem}>\n        <div className={s.aboutTitle}>Contacts: </div>\n        <div className={s.contactList}>\n          {contacts.map( (title) => {\n              return (\n                <div key={title} className={s.contactFieldWrap}>\n                  {createField<FormDataType>(\n                    title,\n                    `contacts.${title}`,\n                    [],\n                    InputArea,\n                    { type: \"text\", fieldType: \"input\", label: title }\n                  )}\n                </div>\n              );\n          })}\n        </div>\n      </div>\n      \n\n\n    </form>\n  );\n};\n\nconst ProfileDataReduxForm = reduxForm<FormDataType,OwnPropsType>({ form: \"edit-profile\", enableReinitialize: true, destroyOnUnmount: false })(ProfileDataForm);\n\nexport default ProfileDataReduxForm;\n","import { ChangeEvent, FC, useEffect, useState } from \"react\";\nimport s from \"./ProfileInfo.module.css\";\n\ntype PropsType = {\n  status: string\n  updateStatus: (newStatus: string ) => void\n}\n\nconst ProfileStatusWithHooks: FC<PropsType> = (props) => {\n    let [editMode,setEditMode] = useState(false)\n    let [status,setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    },[props.status])\n\n    const activateMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n    <div className={s.statusBlock}>\n      {editMode ? (\n        <div>\n          <input\n            autoFocus={true}\n            onBlur={ deactivateMode }\n            onChange={ onStatusChange }\n            type=\"text\"\n            value={status}\n          />\n        </div>\n      ) : (\n        <div>\n          <span onDoubleClick={ activateMode } >{status}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileStatusWithHooks;\n","import { FC } from \"react\"\nimport { TContacts, TProfile } from \"../../../types/types\"\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\"\nimport s from \"./ProfileInfo.module.css\";\n\ntype PropsType = {\n    profile: TProfile\n    status: string\n    isOwner: boolean\n    updateStatus: (newStatus: string) => void\n    activateEditMode: () => void\n  }\n  \nconst ProfileData: FC<PropsType> = ({profile, status, isOwner, updateStatus, activateEditMode}) => {\n  \n    let availableContacts = Object.keys(profile.contacts).filter((k) => { return profile.contacts[k as keyof TContacts]  })\n  \n    return (\n      <div className={s.description}>\n        {isOwner && (\n          <div className={s.editDataWrap}>\n            <button onClick={activateEditMode}>Edit</button>\n          </div>\n        )}\n        <div className={s.aboutItem}>\n          <div className={s.fullName}>{profile.fullName}</div>\n        </div>\n        <div className={s.aboutItem}>\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n        </div>\n        <div className={s.aboutItem}>\n          <span className={s.aboutTitle}>About me: </span>\n          {profile.aboutMe ? profile.aboutMe : \"-\"}\n        </div>\n        <div className={s.aboutItem}>\n          <span className={s.aboutTitle}>Looking for a job:</span>\n          {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        <div className={s.aboutItem}>\n          <div className={s.aboutTitle}>My professional skills:</div>\n          {profile.lookingForAJobDescription\n            ? profile.lookingForAJobDescription\n            : \"-\"}\n        </div>\n        {availableContacts.length > 0 && (\n          <div className={s.aboutItem}>\n            <div className={s.aboutTitle}>Контакты: </div>\n            <ul className={s.contactList}>\n              {availableContacts.map(function (title) {\n                return (\n                  <Contact\n                    key={title}\n                    contactTitle={title}\n                    contactValue={profile.contacts[title as keyof TContacts]}\n                  />\n                );\n              })}\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  type ContactPropsType = {\n  contactTitle: string\n  contactValue: string\n}\n\nconst Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\n  return (\n    <li>\n      <span className={s.aboutTitle}>{contactTitle}:</span>\n      <a href={`${contactValue}`} target=\"_blank\" rel=\"noreferrer\" >\n        {`${contactValue}`}\n      </a>\n    </li>\n  );\n}\n\nexport default ProfileData","import Preloader from \"../../common/Preloader/Preloader\";\nimport defaultPhoto from \"../../../assets/images/user.jpg\";\nimport s from \"./ProfileInfo.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { ChangeEvent, FC, useRef, useState } from \"react\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport { TProfile } from \"../../../types/types\";\nimport ProfileData from \"./ProfileData\";\n\ntype PropsType = {\n  profile: TProfile\n  status: string\n  isOwner: boolean\n  updateStatus: (newStatus: string) => void\n  savePhoto: (file: any) => void\n  saveProfile: (newProfile: TProfile) => any \n}\n\nconst ProfileInfo: FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\n\n  const inputFileRef = useRef<HTMLInputElement>(null)\n\n  let [editMode,setEditMode] = useState(false)\n\n  if (!profile) {\n    return <Preloader />;\n  }\n\n  const onMainPhotoClicked = () => {\n    if (inputFileRef.current !== null) {\n      inputFileRef.current.click()\n    }\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if(e.target.files !== null && e.target.files.length) {\n      savePhoto(e.target.files[0])\n    }\n  }\n  const activateEditMode = () => {\n    setEditMode(true)\n  }\n\n  const onSubmit = (formData: any) => {\n    saveProfile(formData).then(() => setEditMode(false) )\n  };\n\n  return (\n    <div>\n      <div className={s.descriptionBlock}>\n        <div>\n          <img className={s.avatar + (isOwner ? ` ${s.ownerImage}` : '') } \n               src={profile.photos.large != null ? profile.photos.large : defaultPhoto} \n               alt={'Profile avatar'}\n               title={isOwner ? 'Click for uploading' : ''} \n               onClick={onMainPhotoClicked} />\n          {isOwner && (\n              <input className={s.updateAvatarBtn} ref={inputFileRef} type={'file'} onChange={onMainPhotoSelected} />\n            )\n          }\n        </div>\n        \n        {!isOwner && (\n            <div className={s.startChatWrap}>\n              <NavLink to={`/dialogs/${profile.userId}`} >Send message</NavLink>\n            </div>\n          )\n        }\n\n        {editMode \n            ? <ProfileDataForm initialValues={profile}\n                               profile={profile}\n                               onSubmit={onSubmit} />\n            : <ProfileData profile={profile} \n                           status={status} \n                           isOwner={isOwner} \n                           updateStatus={updateStatus} \n                           activateEditMode={activateEditMode}  />\n        }\n\n\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","import { FC } from \"react\";\nimport { TProfile } from \"../../types/types\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\ntype PropsType = {\n  profile: TProfile\n  isOwner: boolean\n  status: string\n  updateStatus: (newStatus: string) => void\n  savePhoto: (file: any) => void\n  saveProfile: (newProfile: TProfile) => any \n\n}\n\nconst Profile: FC<PropsType> = (props) => {\n  \n  return (\n    <div>\n      <ProfileInfo isOwner={props.isOwner} \n                   profile={props.profile} \n                   status={props.status} \n                   updateStatus={props.updateStatus} \n                   savePhoto={props.savePhoto}\n                   saveProfile={props.saveProfile}   />\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","import Profile from \"./Profile\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getUserProfile,getStatus,updateStatus,savePhoto,saveProfile } from \"../../redux/profile-reducer\";\nimport { useParams,useLocation,useNavigate } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { TProfile } from \"../../types/types\";\nimport { TAuthState } from \"../../redux/auth-reducer\";\nimport { AppStateType } from \"../../redux/redux-store\";\n\ntype MapStatePropsType = {\n  profile: TProfile | null\n  status: string\n  auth: TAuthState\n}\n\ntype MapDispatchPropsType = {\n  getUserProfile: (userId: number) => any\n  getStatus: (userId: number) => any\n  updateStatus: (newStatus: string) => void\n  savePhoto: (file: any) => void\n  saveProfile: (newProfile: TProfile) => any \n}\n\ntype HOCPropsType = {\n  router: any\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType & HOCPropsType\n\nclass ProfileContainer extends Component<PropsType> {\n\n  getProfileData = () => {\n    let userId = null \n    if(this.props.router.params.userId) {\n      userId = this.props.router.params.userId\n    }\n\n    else if(this.props.auth.userId) {\n      userId = this.props.auth.userId\n    }\n    else {\n      this.props.router.navigate('/login')\n    }\n    \n    if(userId) {\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n  }\n\n  componentDidMount = () => {\n    \n    this.getProfileData()\n  }\n  componentDidUpdate(prevProps: PropsType) {\n    \n    if (prevProps.router.params.userId !== this.props.router.params.userId) {\n        \n      console.log([prevProps.router.params.userId, this.props.router.params.userId])  \n      this.getProfileData()\n    }\n  }\n  \n  render () {\n    return (\n      <>\n      {\n        this.props.profile \n          ? <Profile isOwner={!this.props.router.params.userId} \n                     profile={this.props.profile} \n                     status={this.props.status} \n                     updateStatus={this.props.updateStatus} \n                     savePhoto={this.props.savePhoto} \n                     saveProfile={this.props.saveProfile} \n                     />\n          : <div>Нет данных для отображения</div>\n      }\n      </>\n    );\n  };\n}\n\n// wrapper to use react router's v6 hooks in class component(to use HOC pattern, like in router v5)\nfunction withRouter(Comp: typeof Component) {\n  function ComponentWithRouterProp(props: any) {\n      let location = useLocation();\n      let navigate = useNavigate();\n      let params = useParams();\n      return (\n          <Comp\n              {...props}\n              router={{ location, navigate, params }}\n          />\n      );\n  }\n\n  return ComponentWithRouterProp;\n}\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  auth: state.auth,\n});\n\nconst MapDispatchToProps = {\n  getUserProfile,\n  getStatus, \n  updateStatus, \n  savePhoto, \n  saveProfile\n}\n\nexport default compose(\n  connect<MapStatePropsType,MapDispatchPropsType, HOCPropsType, AppStateType>(mapStateToProps, MapDispatchToProps),\n  withRouter,\n  withAuthRedirect,\n)(ProfileContainer)\n","// extracted by mini-css-extract-plugin\nexport default {\"checkboxControl\":\"FormControls_checkboxControl__33VzZ\",\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"errorText\":\"FormControls_errorText__5Si0-\",\"fieldWrap\":\"FormControls_fieldWrap__e7QgK\",\"labelCheckboxWrap\":\"FormControls_labelCheckboxWrap__kXX0d\",\"labelTextWrap\":\"FormControls_labelTextWrap__nPV0n\"};","import { Component, FC } from 'react';\nimport { CommonFieldProps, Field, WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\nimport { NestedKeyOf, TValueOf } from '../../../types/types';\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\nimport s from \"./FormControls.module.css\";\n\ntype PropsType = {\n  input: WrappedFieldInputProps\n  meta: WrappedFieldMetaProps\n  fieldType: string\n  id?: string\n  label?: string \n  type: 'textarea' | 'input' | 'checkbox' \n}\n\nexport const InputArea: FC<PropsType> = ({ input, meta: {touched, error}, fieldType, ...props }) => {\n  const hasError = touched && error;\n  console.log('input var:')\n  console.log(input)\n  console.log('props var:')\n  console.log(props)\n  return (\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n      {props.label && props.type !== \"checkbox\" && (\n        <div className={`${s.labelTextWrap}`}>\n          <label htmlFor={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n      \n      <div className={s.fieldWrap}>\n        {fieldType === \"input\" ? (\n          <input {...input} {...props} />\n        ) : (\n          <textarea {...input} {...props} />\n        )}\n      </div>\n      {props.label && props.type === \"checkbox\" && (\n        <div className={s.labelCheckboxWrap}>\n          <label htmlFor={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n\n      {hasError ? (\n        <div className={s.errorText}>\n          <span>{error}</span>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport function  createField<TFormData extends object>(\n  placeholder: string | null,\n  name: NestedKeyOf<TFormData>,\n  validators: Array<FieldValidatorType>,\n  component: string | Component<any,any,any> | FC<any>,\n  props: any\n)\n{\n  let wrapClasses = props.wrapClasses || \"\";\n\n  if (props.type && props.type === \"checkbox\") {\n    wrapClasses += s.checkboxControl;\n  }\n\n  return (\n    <div className={wrapClasses}>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n    </div>\n  );\n};\n","import { connect } from \"react-redux\"\nimport { Navigate } from \"react-router-dom\"\n\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect= (Component) => {\n\n\n    let RedirectComponent = (props) => {\n\n        // console.log(props)\n\n        if(!props.isAuth) return <Navigate to={'/login'} />\n\n        return <Component {...props} />\n    }\n    \n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedRedirectComponent\n}","export type FieldValidatorType = (field: string) => string | undefined\n\nexport const required: FieldValidatorType = (value: string): string | undefined => {\n    if(value && value !== '') {\n        return undefined\n    }\n\n    return 'It is required field!'\n}\n\nexport const maxLength = (maxLengthValue: number): FieldValidatorType => {\n    return (value) => {\n        if(value && value.length > maxLengthValue) {\n            return `You have exceeded the maximum message length(${maxLengthValue})`\n        }\n        \n        return undefined\n    }\n}"],"names":["props","className","s","src","userPhoto","alt","message","likesCount","maxLength300","maxLength","MyPosts","React","postsElements","posts","map","p","id","AddPostFormRedux","onSubmit","formData","sendPost","newPostBody","reduxForm","form","handleSubmit","createField","required","InputArea","fieldType","MapDispatchToProps","updateNewPostText","profileAC","connect","state","profilePage","newPostText","enableReinitialize","destroyOnUnmount","contacts","Object","keys","profile","error","Field","name","component","type","placeholder","label","title","useState","editMode","setEditMode","status","setStatus","useEffect","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","onDoubleClick","Contact","contactTitle","contactValue","href","target","rel","isOwner","activateEditMode","availableContacts","filter","k","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","length","savePhoto","saveProfile","inputFileRef","useRef","Preloader","photos","large","defaultPhoto","current","click","ref","files","to","userId","initialValues","then","ProfileContainer","getProfileData","router","params","auth","navigate","getUserProfile","getStatus","componentDidMount","prevProps","this","console","log","Component","compose","Comp","location","useLocation","useNavigate","useParams","withAuthRedirect","input","meta","touched","hasError","htmlFor","validators","wrapClasses","validate","mapStateToPropsForRedirect","isAuth","maxLengthValue"],"sourceRoot":""}