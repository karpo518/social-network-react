{"version":3,"file":"static/js/672.769eac8d.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","webpack://my-app/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.js","hoc/withAuthRedirect.js","utils/validators/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogItems\":\"Dialogs_dialogItems__VFpmc\",\"selectDialog\":\"Dialogs_selectDialog__ukFfu\",\"dialog\":\"Dialogs_dialog__htSTl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\",\"incoming\":\"Dialogs_incoming__8SLbR\",\"author\":\"Dialogs_author__0lkGo\",\"body\":\"Dialogs_body__6RDuF\",\"outgoing\":\"Dialogs_outgoing__-AWT8\",\"image\":\"Dialogs_image__wl+13\",\"name\":\"Dialogs_name__ThYtM\",\"form\":\"Dialogs_form__2diAn\"};","import { NavLink } from \"react-router-dom\";\nimport s from \"./../Dialogs.module.css\";\n\nconst DialogItem = (props) => {\n  let path = `/dialogs/${props.id}`;\n  return (\n    <div className={s.dialog + \" \" + s.active}>\n      <div className={s.image} >\n        <img src={props.image} alt={'dialog img'} />\n      </div>\n      <div className={s.name}>\n        <NavLink to={path}>{props.userName}</NavLink>\n        {\n          props.newMessagesCount \n            ? <span className={s.newCount}>+{props.newMessagesCount}</span> \n            : ''\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import s from \"./../Dialogs.module.css\";\nimport defaultPhoto from \"../../../assets/images/user.jpg\";\n\nconst Message = (props) => {\n  \n  // console.log('Сообщение!')\n  // console.log([props.senderId, props.selectedId ])\n  \n  let ownershipClass = props.senderId === props.selectedId ? \"incoming\" : \"outgoing\";\n  return (\n    <div className={s.message + \" \" + s[ownershipClass]}>\n      <div className={s.author}>\n        <div className={s.image}>\n          <img src={defaultPhoto} alt={'default img'} />\n        </div>\n      </div>\n      <div className={s.body}>{props.body}</div>\n    </div>\n  );\n};\n\nexport default Message;\n","import React from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport { reduxForm } from \"redux-form\";\nimport defaultPhoto from \"../../assets/images/user.jpg\";\nimport { createField, InputArea } from \"../common/FormControls/FormControls\";\nimport { required, maxLength} from \"../../utils/validators/validators\";\n\nlet maxLength300 = maxLength(300)\n\nconst AddMessageForm = (props) => {\n\n  return (\n    <form onSubmit={props.handleSubmit} className={s.form}>\n      <div className=\"title\">Send message</div>\n\n      { createField('Write your message here..', 'body', [required, maxLength300], InputArea, {fieldType: 'textarea'}) }\n      <div>\n        <button className={s.submit} >Send</button>\n      </div>\n    </form>\n  );\n};\n\nconst AddMessageFormRedux = reduxForm({ form: \"DialogsAddMessageForm\" })(AddMessageForm);\n\nconst Dialogs = (props) => {\n  const onSubmit = (formData) => {\n\n      props.sendMessage(props.selectedId, formData);\n  };\n\n  console.log(props)\n\n  let allDialogs = props.newDialog === null ? props.dialogs : [props.newDialog, ...props.dialogs]\n\n  let dialogsElements = allDialogs.map((d) => {\n        // console.log(d)\n        return <DialogItem userName={d.userName} id={d.id} image={d.photos.small || defaultPhoto} key={d.id} newMessagesCount={d.newMessagesCount} />\n    }\n  )\n\n  let messagesElements = props.messages.map((m) => {\n      return (\n        <Message\n          senderId={m.senderId}\n          selectedId={props.selectedId}\n          senderName={m.senderName}\n          isIncoming={m.isIncoming}\n          body={m.body}\n          key={m.id}\n        />\n      )\n  })\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogItems}>{dialogsElements}</div>\n      {\n        props.selectedId \n          ? <div className={s.messages}>\n              <div className={s.list}>{messagesElements}</div>\n              <AddMessageFormRedux onSubmit={onSubmit} userId={props.selectedId} />\n            </div>\n          : <div className={s.selectDialog} >Please, select dialog!</div>\n      }\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import Dialogs from \"./Dialogs\";\nimport {\n  getDialogs,\n  getMessages,\n  selectDialog,\n  sendMessage,\n  createNewDialog,\n  resetNewDialog,\n  setSelectedDialog,\n} from \"../../redux/dialogs-reducer\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport { useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nexport const DialogsContainer = (props) => {\n  \n  const params = useParams();\n\n  let selectedId = params.userId ? parseInt(params.userId) : 0;\n\n  let [setSelectedDialog, getDialogs, getMessages] = [props.setSelectedDialog, props.getDialogs, props.getMessages]\n\n  useEffect(() => {\n    console.log(\"Use effect: set selected id\")\n    setSelectedDialog(selectedId)\n    getDialogs(selectedId)\n    getMessages(selectedId)\n  }, [selectedId, setSelectedDialog, getDialogs, getMessages])\n\n  useEffect(() => {\n      console.log(\"Use effect: update dialogs and messages\");\n\n        let timerId = setInterval(() => {\n          console.log(`Таймаут сработал! selectedId: ${selectedId}`)  \n          getDialogs(selectedId)\n          getMessages(selectedId)\n        }, 15000)\n\n        return () => {\n          console.log('Демонтаж компонента!')\n          clearTimeout(timerId);\n        }\n  }, [selectedId, setSelectedDialog, getDialogs, getMessages])      \n\n  return (\n    <Dialogs\n      dialogs={props.dialogs}\n      newDialog={props.newDialog}\n      messages={props.messages}\n      selectedId={props.selectedId}\n      sendMessage={props.sendMessage}\n    />\n  );\n};\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogs: state.dialogsPage.dialogs,\n    messages: state.dialogsPage.messages,\n    selectedId: state.dialogsPage.selectedId,\n    newDialog: state.dialogsPage.newDialog,\n    auth: state.auth,\n  };\n};\n\n\nexport default compose(\n  connect(mapStateToProps, {\n    getDialogs,\n    createNewDialog,\n    resetNewDialog,\n    selectDialog,\n    getMessages,\n    sendMessage,\n    setSelectedDialog\n  }),\n  withAuthRedirect\n)(DialogsContainer);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkboxControl\":\"FormControls_checkboxControl__33VzZ\",\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"errorText\":\"FormControls_errorText__5Si0-\",\"fieldWrap\":\"FormControls_fieldWrap__e7QgK\",\"labelWrap\":\"FormControls_labelWrap__nm-sq\"};","import { Field } from \"redux-form\";\nimport s from \"./FormControls.module.css\";\n\nexport const InputArea = ({ input, meta: {touched, error}, fieldType, ...props }) => {\n  const hasError = touched && error;\n\n  return (\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n      <div className={s.fieldWrap}>\n        {fieldType === \"input\" ? (\n          <input {...input} {...props} />\n        ) : (\n          <textarea {...input} {...props} />\n        )}\n      </div>\n      {props.label && (\n        <div className={s.labelWrap}>\n          <label for={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n\n      {hasError ? (\n        <div className={s.errorText}>\n          <span>{error}</span>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport const createField = (\n  placeholder,\n  name,\n  validators,\n  component,\n  props\n) => {\n  let wrapClasses = props.wrapClasses || \"\";\n\n  if (props.type && props.type === \"checkbox\") {\n    wrapClasses += s.checkboxControl;\n  }\n\n  return (\n    <div className={wrapClasses}>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n    </div>\n  );\n};\n","import { connect } from \"react-redux\"\nimport { Navigate } from \"react-router-dom\"\n\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect= (Component) => {\n\n\n    let RedirectComponent = (props) => {\n\n        // console.log(props)\n\n        if(!props.isAuth) return <Navigate to={'/login'} />\n\n        return <Component {...props} />\n    }\n    \n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedRedirectComponent\n}","export const required = (value) => {\n    console.log('required')\n    if(value && value !== '') {\n        return undefined\n    }\n\n    return 'It is required field!'\n}\n\nexport const maxLength = (maxLengthValue) => {\n    return (value) => {\n        if(value && value.length > maxLengthValue) {\n            return `You have exceeded the maximum message length(${maxLengthValue})`\n        }\n        \n        return undefined\n    }\n}"],"names":["props","path","id","className","s","src","image","alt","to","userName","newMessagesCount","ownershipClass","senderId","selectedId","defaultPhoto","body","maxLength300","maxLength","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","InputArea","fieldType","console","log","dialogsElements","newDialog","dialogs","map","d","photos","small","messagesElements","messages","m","senderName","isIncoming","formData","sendMessage","userId","DialogsContainer","params","useParams","parseInt","setSelectedDialog","getDialogs","getMessages","useEffect","timerId","setInterval","clearTimeout","compose","connect","state","dialogsPage","auth","createNewDialog","resetNewDialog","selectDialog","withAuthRedirect","input","meta","touched","error","hasError","label","for","placeholder","name","validators","component","wrapClasses","type","Field","validate","mapStateToPropsForRedirect","isAuth","Component","value","maxLengthValue","length"],"sourceRoot":""}