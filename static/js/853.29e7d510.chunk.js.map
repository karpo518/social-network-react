{"version":3,"file":"static/js/853.29e7d510.chunk.js","mappings":"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","sources":["redux/users-selectors.ts","utils/hooks/usePrevious.ts","webpack://my-app/./src/components/common/Paginator/Paginator.module.css?6caa","components/common/Paginator/Paginator.tsx","webpack://my-app/./src/components/Users/Users.module.css?b9d0","components/Users/FilterUsersFormik.tsx","webpack://my-app/./src/components/Users/User.module.css?05eb","components/Users/User.tsx","components/Users/UsersPage.tsx"],"sourcesContent":["import { TAppState } from './redux-store';\nimport { createSelector } from 'reselect'\n\nexport const getUsersSelector = (state: TAppState) => {\n    return  state.usersPage.users;\n}\n\nexport const getUsers = createSelector([getUsersSelector], (users) => {\n    return  users.filter(u => true);\n})\n\nexport const getPageSize = (state: TAppState) => {\n    return  state.usersPage.pageSize;\n}\n\nexport const getTotalUsersCount = (state: TAppState) => {\n    return  state.usersPage.totalUsersCount;\n}\n\nexport const getCurrentPage = (state: TAppState) => {\n    return  state.usersPage.currentPage;\n}\n\nexport const getIsFetching = (state: TAppState) => {\n    return  state.usersPage.isFetching;\n}\n\nexport const getFollowingInProgress = (state: TAppState) => {\n    return  state.usersPage.followingInProgress;\n}\n\nexport const getFilter = (state: TAppState) => {\n    return  state.usersPage.filter;\n}","import { useEffect, useRef } from \"react\";\n\nfunction usePrevious<T>(value: T | undefined): T | undefined {\n    // The ref object is a generic container whose current property is mutable ...\n    // ... and can hold any value, similar to an instance property on a class\n    const ref = useRef<T | undefined>();\n    // Store current value in ref\n    useEffect(() => {\n      ref.current = value;\n    }, [value]); // Only re-run if value changes\n    // Return previous value (happens before update in useEffect above)\n    return ref.current;\n  }\n\nexport default usePrevious","// extracted by mini-css-extract-plugin\nexport default {\"selectedPage\":\"Paginator_selectedPage__CRNLp\",\"pagination\":\"Paginator_pagination__Imaqt\",\"beforePortion\":\"Paginator_beforePortion__gx-B8\",\"afterPortion\":\"Paginator_afterPortion__EStLX\"};","import React, { FC, useState } from \"react\";\nimport cn from 'classnames'\nimport s from \"./Paginator.module.css\";\n\ntype Props = {\n  totalItemsCount: number\n  pageSize: number\n  currentPage: number\n  onPageChanged: (pageNumber: number) => void\n  portionSize?: number\n}\n\nconst Paginator: FC<Props> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\n  \n  const calcPortionNumber = (pageNumber: number) => {    \n    return  Math.floor(pageNumber/portionSize) + 1\n  }\n\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n  let pages: Array<number> = [];\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let portionCount = Math.ceil(pagesCount / portionSize);\n\n  let [portionNumber, setPortionNumber] = useState (calcPortionNumber(currentPage))\n\n  let startPortion = (portionNumber - 1) * portionSize + 1\n  let endPortion = (portionNumber - 1) * portionSize + portionSize\n\n  const onPortionClick = (portionNumber: number) => {\n\n    setPortionNumber(portionNumber)\n  }\n\n  const onPageClick = (pageNumber: number) => {\n\n    onPageChanged(pageNumber)\n\n    let newPortionNumber = calcPortionNumber(pageNumber)\n    if(newPortionNumber !== portionNumber) {\n      setPortionNumber(newPortionNumber)\n    } \n  }\n\n  return (pagesCount < 2) ? <></>  \n    :(\n    <div className={s.pagination}>\n        { portionNumber > 1 && \n          <>\n          <span key={'1'} onClick={() => onPageClick(1)} >1</span> \n          <span onClick={() => onPortionClick(portionNumber -1)} className={s.beforePortion} >{'<<'}</span>\n          </> \n        }\n\n        {pages.filter(p => (p >= startPortion && p <= endPortion) ).map((p) => {\n          return (\n            <span\n              key={p}\n              onClick={() => onPageClick(p)}\n              className={ cn({[s.selectedPage]: currentPage === p})}\n            >\n              {p}\n            </span>\n          );\n        })}\n\n        { portionNumber < portionCount && \n          <>\n          <span onClick={() => onPortionClick(portionNumber +1)} className={s.afterPortion} >{'>>'}</span>\n          <span key={pagesCount} onClick={() => onPageClick(pagesCount)} >{pagesCount}</span>\n          </> \n        }\n\n    </div>\n  )\n};\n\nexport default Paginator;\n","// extracted by mini-css-extract-plugin\nexport default {\"inputsBlock\":\"Users_inputsBlock__OiQga\",\"fieldItem\":\"Users_fieldItem__QXuIi\",\"fileItemIsFriend\":\"Users_fileItemIsFriend__V9TU9\",\"term\":\"Users_term__67Z-6\",\"isFriend\":\"Users_isFriend__bJWqe\"};","import cn from \"classnames\";\nimport { Field, Form, Formik, useFormikContext } from \"formik\";\nimport throttle from \"lodash.throttle\";\nimport React, { FC, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { friendsOnly, TFilter, TIsFriend } from \"../../redux/users-reducer\";\nimport { getFilter } from \"../../redux/users-selectors\";\nimport s from \"./Users.module.css\";\n\ntype TProps = {\n\n  onFilterChanged: (values: TFilter) => void\n}\n\ntype TFormData = {\n  term: string,\n  isFriend: TIsFriend\n}\n\nconst filterUsersFormValidate = (values: TFormData) => {\n              \n            const errors: any = {}\n            /*\n            if (!values.term) {\n              errors.term = \"Required\";\n            } else if (\n              !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.term)\n            ) {\n              errors.term = \"Invalid email address\";\n            }*/\n            return errors;\n}\n\nconst FormChangeListener: React.FC = () => {\n  const {values, initialValues, submitForm} = useFormikContext();\n  useEffect(() => {\n    if(values !== initialValues ) {\n      submitForm()\n    }\n  }, [values, initialValues, submitForm]);\n  return null;\n};\n\n\nconst  FilterUsersFormik: FC<TProps> = React.memo((props) => {\n\n    const filter = useSelector(getFilter)\n\n    const onSubmit = (values: TFormData, { setSubmitting }: {setSubmitting: (isSubmitting: boolean) => void} ) => {\n      props.onFilterChanged(values)\n      setSubmitting(false);\n    }\n\n    const tOnSubmit = throttle(onSubmit, 1000, {leading: false})\n\n    return (\n      /* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */\n      <div className={s.inputsBlock}>\n        <Formik\n          initialValues={filter}\n          validate={filterUsersFormValidate}\n          onSubmit={tOnSubmit}\n        >\n          {({ values, isSubmitting }) => (\n            <Form>\n              <FormChangeListener />\n              <div className={cn(s.fieldItem, s.fileItemIsFriend)} >\n                <label htmlFor=\"isFriend\">Статус подписки</label>\n                <Field className={s.isFriend} name=\"isFriend\" as=\"select\">\n                  <option value={friendsOnly.Any} >Любой</option>\n                  <option value={friendsOnly.Yes}>Те, на кого подписан</option>\n                  <option value={friendsOnly.No}>Те, на кого НЕ подписан</option>\n                </Field>\n              </div>\n              <div className={s.fieldItem}>\n                <label htmlFor=\"term\">Поиск по имени пользователя</label>\n                <Field className={s.term} type=\"text\" name=\"term\" />\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    )\n  })\n\n  export default FilterUsersFormik","// extracted by mini-css-extract-plugin\nexport default {\"user\":\"User_user__vm1W0\",\"imageCol\":\"User_imageCol__zWKZj\",\"mainCol\":\"User_mainCol__yLpQ+\",\"image\":\"User_image__-QAvZ\",\"btn\":\"User_btn__NQ8ct\",\"btnFollow\":\"User_btnFollow__uXb79\",\"name\":\"User_name__Sid3D\",\"mainLeft\":\"User_mainLeft__AkKBC\",\"mainRight\":\"User_mainRight__nLT7o\",\"location\":\"User_location__774Ci\",\"status\":\"User_status__9rxXe\",\"preloader\":\"User_preloader__63gEQ\"};","import s from \"./User.module.css\";\nimport defaultPhoto from \"../../assets/images/user.jpg\";\nimport { NavLink } from \"react-router-dom\";\nimport { TUser } from \"../../types/types\";\nimport { FC } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getFollowingInProgress } from \"../../redux/users-selectors\";\n\ntype TProps = {\n  user: TUser\n  onFollow: (userId: number) => void\n  onUnfollow: (userId: number) => void\n}\n\nconst User: FC<TProps> = ({user, onFollow, onUnfollow}) => {\n\n  const followingInProgress = useSelector(getFollowingInProgress)\n\n  return (\n    <div className={s.user} key={user.id}>\n      <div className={s.imageCol}>\n        <NavLink to={\"/profile/\" + user.id}>\n          <img\n            className={s.image}\n            src={user.photos.small != null ? user.photos.small : defaultPhoto}\n            alt={\"Profile avatar\"}\n          />\n        </NavLink>\n        <div>\n          {user.followed ? (\n            <button\n              onClick={() => {\n                onUnfollow(user.id);\n              }}\n              className={`${s.btn} ${s.btnFollow}`}\n              disabled={followingInProgress.some((id: number) => id === user.id)}\n            >\n              Unfollow\n            </button>\n          ) : (\n            <button\n              onClick={() => {\n                onFollow(user.id);\n              }}\n              className={`${s.btn} ${s.btnUnfollow}`}\n              disabled={followingInProgress.some((id) => id === user.id)}\n            >\n              Follow\n            </button>\n          )}\n        </div>\n      </div>\n      <div className={s.mainCol}>\n        <div className={s.mainLeft}>\n          <div className={s.name}>{user.name}</div>\n          <div className={s.status}>{user.status}</div>\n        </div>\n        <div className={s.mainRight}>\n          <div className={s.location}>\n            <div className={s.city}>\n              <span>{\"user.location.city\"}</span>,\n            </div>\n            <div className={s.country}>\n              <span>{\"user.location.country\"}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default User;\n","import { FC, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { TAppState } from \"../../redux/redux-store\";\nimport { follow, loadUsers, TFilter, TUsersActions, unfollow, usersAC } from \"../../redux/users-reducer\";\nimport { getCurrentPage, getFilter, getIsFetching, getPageSize, getTotalUsersCount, getUsers } from \"../../redux/users-selectors\";\nimport { TUser } from \"../../types/types\";\nimport usePrevious from \"../../utils/hooks/usePrevious\";\nimport Paginator from \"../common/Paginator/Paginator\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport FilterUsersFormik from \"./FilterUsersFormik\";\nimport User from \"./User\";\n\n\nexport const UsersPage: FC = () => {\n\n  const users = useSelector(getUsers)\n  const totalUsersCount = useSelector(getTotalUsersCount)\n  const currentPage = useSelector(getCurrentPage)\n  const pageSize = useSelector(getPageSize)\n  const isFetching = useSelector(getIsFetching)\n  const filter = useSelector(getFilter)\n\n  const dispatch = useDispatch<ThunkDispatch<TAppState, unknown, TUsersActions>>();\n\n  const onPageChanged = (pageNumber: number) => {    \n    // props.setCurrentPage(pageNumber);\n    dispatch(usersAC.setCurrentPage(pageNumber))\n  }\n\n  const onFilterChanged = (values: TFilter) => {\n    dispatch(usersAC.setFilter(values))\n  }\n\n  const onFollow = (userId: number) => {\n    dispatch(follow(userId))\n  } \n\n  const onUnfollow = (userId: number) => {\n    dispatch(unfollow(userId))\n  }\n\n  const prevFilter = usePrevious<TFilter>(filter) || filter\n\n  const page = (prevFilter !== filter) ? 1 : currentPage\n    \n  useEffect(() => {\n    \n    if(currentPage !== page) {\n      dispatch(usersAC.setCurrentPage(1))\n    }\n\n    dispatch(loadUsers(currentPage, \n                       pageSize, \n                       filter.isFriend, \n                       filter.term))\n\n  },[currentPage, pageSize, page, filter, dispatch])\n\n\n  return (\n    <div>\n      <h2>Users</h2>\n\n      <FilterUsersFormik onFilterChanged={onFilterChanged} />\n\n      <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize}  onPageChanged={onPageChanged} currentPage={currentPage} />\n      <div>\n        { \n          isFetching \n            ? <Preloader />\n            : users.map((u: TUser) => {\n                return (\n                  <User\n                    key={u.id}\n                    user={u}\n                    onFollow={onFollow}\n                    onUnfollow={onUnfollow}\n                  />\n                );\n            })\n        }\n      </div>\n    </div>\n  );\n};\n"],"names":["getUsers","createSelector","state","usersPage","users","filter","u","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getFilter","value","ref","useRef","useEffect","current","totalItemsCount","onPageChanged","portionSize","calcPortionNumber","pageNumber","Math","floor","pagesCount","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","startPortion","endPortion","onPortionClick","onPageClick","newPortionNumber","className","s","onClick","p","map","cn","filterUsersFormValidate","values","FormChangeListener","useFormikContext","initialValues","submitForm","React","props","useSelector","tOnSubmit","throttle","setSubmitting","onFilterChanged","leading","validate","onSubmit","isSubmitting","htmlFor","name","as","friendsOnly","type","user","onFollow","onUnfollow","to","id","src","photos","small","defaultPhoto","alt","followed","disabled","some","status","UsersPage","dispatch","useDispatch","userId","follow","unfollow","page","usePrevious","usersAC","loadUsers","isFriend","term","Preloader"],"sourceRoot":""}