{"version":3,"file":"static/js/3.682e93bc.chunk.js","mappings":"wNACA,GAAgB,QAAU,yBAAyB,YAAc,6BAA6B,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,SAAW,0BAA0B,OAAS,wBAAwB,KAAO,sBAAsB,SAAW,0BAA0B,MAAQ,uBAAuB,KAAO,sBAAsB,KAAO,uB,6BCyB/b,EApBmC,SAACA,GAClC,IAAIC,EAAI,mBAAeD,EAAME,IACzBC,EAAQH,EAAMI,OAAOC,OAASC,EAClC,OACE,iBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,WACE,gBAAKD,UAAWC,EAAAA,MAAhB,UACE,gBAAKC,IAAKN,EAAOO,IAAK,kBAExB,iBAAKH,UAAWC,EAAAA,KAAhB,WACE,SAAC,KAAD,CAASG,GAAIV,EAAb,SAAoBD,EAAMY,WAExBZ,EAAMa,kBACF,kBAAMN,UAAWC,EAAAA,SAAjB,cAA+BR,EAAMa,oBACrC,UCOd,EAf+B,SAACb,GAE9B,IAAIc,EAAiBd,EAAMe,WAAaf,EAAMgB,WAAa,WAAa,WACxE,OACE,iBAAKT,UAAWC,EAAAA,QAAY,IAAMA,EAAEM,GAApC,WACE,gBAAKP,UAAWC,EAAAA,OAAhB,UACE,gBAAKD,UAAWC,EAAAA,MAAhB,UACE,gBAAKC,IAAKH,EAAcI,IAAK,qBAGjC,gBAAKH,UAAWC,EAAAA,KAAhB,SAAyBR,EAAMiB,W,4BC+BjCC,GAAeC,EAAAA,EAAAA,GAAU,KA0BvBC,GAAsBC,EAAAA,EAAAA,GAAsC,CAAEC,KAAM,yBAA9CD,EAbc,SAACrB,GAEzC,OACE,kBAAMuB,SAAUvB,EAAMwB,aAAcjB,UAAWC,EAAAA,KAA/C,WACE,gBAAKD,UAAU,QAAf,2BACEkB,EAAAA,EAAAA,GAAY,4BAA6B,OAAQ,CAACC,EAAAA,EAAUR,GAAeS,EAAAA,EAAW,CAACC,UAAW,cACpG,0BACE,mBAAQrB,UAAWC,EAAAA,OAAnB,0BAQR,EA/D+B,SAACR,GAC9B,IAQI6B,GAFiC,OAApB7B,EAAM8B,UAAqB9B,EAAM+B,QAAjC,CAA4C/B,EAAM8B,WAAlD,eAAgE9B,EAAM+B,WAEtDC,KAAI,SAACC,GAChC,OAAO,SAAC,GAAD,UAA2BA,GAAVA,EAAE/B,OAI5BgC,EAAmBlC,EAAMmC,SAASH,KAAI,SAACI,GACvC,OACE,SAAC,GAAD,kBAAaA,GAAb,IAAgBpB,WAAYhB,EAAMgB,iBAIxC,OACE,iBAAKT,UAAWC,EAAAA,QAAhB,WACE,gBAAKD,UAAWC,EAAAA,YAAhB,SAAgCqB,IAE9B7B,EAAMgB,YACF,iBAAKT,UAAWC,EAAAA,SAAhB,WACE,gBAAKD,UAAWC,EAAAA,KAAhB,SAAyB0B,KACzB,SAACd,EAAD,CAAqBG,SA1BhB,SAACc,GACQ,OAArBrC,EAAMgB,YACPhB,EAAMsC,YAAYtC,EAAMgB,WAAYqB,IAwBaE,OAAQvC,EAAMgB,iBAEzD,gBAAKT,UAAWC,EAAAA,aAAhB,wC,kDCTCgC,EAAkC,SAACxC,GAE9C,IAAMyC,GAASC,EAAAA,EAAAA,MAEX1B,EAAayB,EAAOF,OAASI,SAASF,EAAOF,QAAU,EAE3D,EAAmD,CAACvC,EAAM4C,kBAAmB5C,EAAM6C,WAAY7C,EAAM8C,aAAhGF,EAAL,KAAwBC,EAAxB,KAAoCC,EAApC,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACRH,EAAkB5B,GAClB6B,EAAW7B,GACX8B,EAAY9B,KACX,CAACA,EAAY4B,EAAmBC,EAAYC,KAE/CC,EAAAA,EAAAA,YAAU,WAEJ,IAAIC,EAAUC,aAAY,WACxBJ,EAAW7B,GACX8B,EAAY9B,KACX,MAEH,OAAO,WACLkC,aAAaF,MAElB,CAAChC,EAAY4B,EAAmBC,EAAYC,KAG7C,SAAC,EAAD,CACEf,QAAS/B,EAAM+B,QACfD,UAAW9B,EAAM8B,UACjBK,SAAUnC,EAAMmC,SAChBnB,WAAYhB,EAAMgB,WAClBsB,YAAatC,EAAMsC,eAerBa,EAAqB,CACvBN,WAAAA,EAAAA,GACAO,gBAAAA,EAAAA,GACAC,eAAAA,EAAAA,GACAP,YAAAA,EAAAA,GACAR,YAAAA,EAAAA,GACAM,kBAAAA,EAAAA,IAGF,GAAeU,EAAAA,EAAAA,IACbC,EAAAA,GACAC,EAAAA,EAAAA,KArBoB,SAACC,GACrB,MAAO,CACL1B,QAAS0B,EAAMC,YAAY3B,QAC3BI,SAAUsB,EAAMC,YAAYvB,SAC5BnB,WAAYyC,EAAMC,YAAY1C,WAC9Bc,UAAW2B,EAAMC,YAAY5B,UAC7B6B,KAAMF,EAAME,QAesER,GAFtF,CAGEX,I,6GC/FF,EAAkC,sCAAlC,EAAsF,kCAAtF,EAAgI,4BAAhI,EAAwK,gCAAxK,EAAoN,gCAApN,EAAwQ,wCAAxQ,EAAgU,oC,wCCEnTb,EAAY,SAAC,GAA4D,IAA1DiC,EAAyD,EAAzDA,MAAyD,IAAlDC,KAAOC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,MAAQnC,EAA0B,EAA1BA,UAAc5B,GAAY,YAC7EgE,EAAWF,GAAWC,EAE5B,OACE,iBAAKxD,UAAWC,EAAgB,KAAOwD,EAAWxD,EAAU,IAA5D,UACGR,EAAMiE,OAAwB,aAAfjE,EAAMkE,OACpB,gBAAK3D,UAAS,UAAKC,GAAnB,UACE,kBAAO2D,QAASnE,EAAME,IAAM,GAA5B,SAAiCF,EAAMiE,WAI3C,gBAAK1D,UAAWC,EAAhB,SACiB,UAAdoB,GACC,oCAAWgC,GAAW5D,KAEtB,uCAAc4D,GAAW5D,MAG5BA,EAAMiE,OAAwB,aAAfjE,EAAMkE,OACpB,gBAAK3D,UAAWC,EAAhB,UACE,kBAAO2D,QAASnE,EAAME,IAAM,GAA5B,SAAiCF,EAAMiE,UAI1CD,GACC,gBAAKzD,UAAWC,EAAhB,UACE,0BAAOuD,MAGT,OAMKtC,EAAc,SACzB2C,EACAC,EACAC,EACAC,EACAvE,GAEA,IAAIwE,EAAcxE,EAAMwE,aAAe,GAMvC,OAJIxE,EAAMkE,MAAuB,aAAflE,EAAMkE,OACtBM,GAAehE,IAIf,gBAAKD,UAAWiE,EAAhB,UACE,SAACC,EAAA,GAAD,QACEL,YAAaA,EACbC,KAAMA,EACNK,SAAUJ,EACVC,UAAWA,GACPvE,Q,gGCtDR2E,EAA6B,SAAClB,GAAD,MAAY,CACzCmB,OAAQnB,EAAME,KAAKiB,SAGVrB,EAAkB,SAACsB,GAc5B,OAFiCrB,EAAAA,EAAAA,IAAQmB,EAARnB,EATT,SAACxD,GAIrB,OAAIA,EAAM4E,QAEH,SAACC,GAAD,UAAe7E,KAFG,SAAC,KAAD,CAAUW,GAAI,gB,4ECfxC,IAAMe,EAAW,SAACoD,GAErB,GADAC,QAAQC,IAAI,aACTF,GAAmB,KAAVA,EAIZ,MAAO,yBAGE3D,EAAY,SAAC8D,GACtB,OAAO,SAACH,GACJ,GAAGA,GAASA,EAAMI,OAASD,EACvB,MAAM,gDAAN,OAAuDA,EAAvD","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","webpack://my-app/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.js","hoc/withAuthRedirect.js","utils/validators/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogItems\":\"Dialogs_dialogItems__VFpmc\",\"selectDialog\":\"Dialogs_selectDialog__ukFfu\",\"dialog\":\"Dialogs_dialog__htSTl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\",\"incoming\":\"Dialogs_incoming__8SLbR\",\"author\":\"Dialogs_author__0lkGo\",\"body\":\"Dialogs_body__6RDuF\",\"outgoing\":\"Dialogs_outgoing__-AWT8\",\"image\":\"Dialogs_image__wl+13\",\"name\":\"Dialogs_name__ThYtM\",\"form\":\"Dialogs_form__2diAn\"};","import { FC } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { DialogType } from \"../../../types/types\";\nimport s from \"./../Dialogs.module.css\";\nimport defaultPhoto from \"../../../assets/images/user.jpg\";\n\nconst DialogItem: FC<DialogType> = (props) => {\n  let path = `/dialogs/${props.id}`;\n  let image = props.photos.small || defaultPhoto\n  return (\n    <div className={s.dialog + \" \" + s.active}>\n      <div className={s.image} >\n        <img src={image} alt={'dialog img'} />\n      </div>\n      <div className={s.name}>\n        <NavLink to={path}>{props.userName}</NavLink>\n        {\n          props.newMessagesCount \n            ? <span className={s.newCount}>+{props.newMessagesCount}</span> \n            : ''\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import s from \"./../Dialogs.module.css\";\nimport defaultPhoto from \"../../../assets/images/user.jpg\";\nimport { FC } from \"react\";\nimport { MessageType } from \"../../../types/types\";\n\ntype OtherPropsType = {\n  selectedId: number | null\n}\n\ntype PropsType = MessageType & OtherPropsType\n\nconst Message: FC<PropsType> = (props) => {\n  \n  let ownershipClass = props.senderId === props.selectedId ? \"incoming\" : \"outgoing\";\n  return (\n    <div className={s.message + \" \" + s[ownershipClass]}>\n      <div className={s.author}>\n        <div className={s.image}>\n          <img src={defaultPhoto} alt={'default img'} />\n        </div>\n      </div>\n      <div className={s.body}>{props.body}</div>\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { FC } from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { createField, InputArea } from \"../common/FormControls/FormControls\";\nimport { required, maxLength} from \"../../utils/validators/validators\";\nimport { DialogType, MessageType } from \"../../types/types\";\n\ntype PropsType = {\n  selectedId: number | null\n  dialogs: Array<DialogType>\n  messages: Array<MessageType>\n  newDialog: DialogType | null\n  sendMessage: (userId: number, formData: any) => void\n}\n\nconst Dialogs: FC<PropsType> = (props) => {\n  const onSubmit = (formData: any) => {\n    if(props.selectedId !== null) { \n      props.sendMessage(props.selectedId, formData)\n    }\n  }\n\n  let allDialogs = props.newDialog === null ? props.dialogs : [props.newDialog, ...props.dialogs]\n\n  let dialogsElements = allDialogs.map((d: DialogType) => {\n        return <DialogItem key={d.id} {...d} />\n    }\n  )\n\n  let messagesElements = props.messages.map((m: MessageType) => {\n      return (\n        <Message {...m} selectedId={props.selectedId} />\n      )\n  })\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogItems}>{dialogsElements}</div>\n      {\n        props.selectedId \n          ? <div className={s.messages}>\n              <div className={s.list}>{messagesElements}</div>\n              <AddMessageFormRedux onSubmit={onSubmit} userId={props.selectedId} />\n            </div>\n          : <div className={s.selectDialog} >Please, select dialog!</div>\n      }\n    </div>\n  );\n};\n\nlet maxLength300 = maxLength(300)\n\ntype FormDataType = {\n  body: string\n}\n\ntype OwnPropsType = {\n  userId: number\n  onSubmit: (formData: any) => void\n}\n\ntype FormPropsType = OwnPropsType & InjectedFormProps<FormDataType,OwnPropsType>\n\nconst AddMessageForm: FC<FormPropsType> = (props) => {\n\n  return (\n    <form onSubmit={props.handleSubmit} className={s.form}>\n      <div className=\"title\">Send message</div>\n      { createField('Write your message here..', 'body', [required, maxLength300], InputArea, {fieldType: 'textarea'}) }\n      <div>\n        <button className={s.submit} >Send</button>\n      </div>\n    </form>\n  );\n};\n\nconst AddMessageFormRedux = reduxForm<FormDataType, OwnPropsType>({ form: \"DialogsAddMessageForm\" })(AddMessageForm);\n\nexport default Dialogs;\n","import Dialogs from \"./Dialogs\";\nimport {\n  getDialogs,\n  getMessages,\n  sendMessage,\n  createNewDialog,\n  resetNewDialog,\n  setSelectedDialog,\n} from \"../../redux/dialogs-reducer\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport { useParams } from \"react-router-dom\";\nimport { FC, useEffect } from \"react\";\nimport { DialogType, MessageType } from \"../../types/types\";\nimport { authType } from \"../../redux/auth-reducer\";\nimport { AppStateType } from \"../../redux/redux-store\";\n\ntype MapStatePropsType = {\n  dialogs: Array<DialogType>\n  messages: Array<MessageType>\n  selectedId: number | null,\n  newDialog: DialogType | null,\n  auth: authType,\n}\n\ntype MapDispatchPropsType = {\n  getDialogs: (selectedUserId: number) => void\n  createNewDialog: (userId: number) => void\n  resetNewDialog: () => void\n  getMessages: (userId: number) => void\n  sendMessage: (userId: number, formData: any) => void\n  setSelectedDialog: (userId: number) => void\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType\n\nexport const DialogsContainer: FC<PropsType> = (props) => {\n  \n  const params = useParams();\n\n  let selectedId = params.userId ? parseInt(params.userId) : 0;\n\n  let [setSelectedDialog, getDialogs, getMessages] = [props.setSelectedDialog, props.getDialogs, props.getMessages]\n\n  useEffect(() => {\n    setSelectedDialog(selectedId)\n    getDialogs(selectedId)\n    getMessages(selectedId)\n  }, [selectedId, setSelectedDialog, getDialogs, getMessages])\n\n  useEffect(() => {\n\n        let timerId = setInterval(() => { \n          getDialogs(selectedId)\n          getMessages(selectedId)\n        }, 15000)\n\n        return () => {\n          clearTimeout(timerId);\n        }\n  }, [selectedId, setSelectedDialog, getDialogs, getMessages])      \n\n  return (\n    <Dialogs\n      dialogs={props.dialogs}\n      newDialog={props.newDialog}\n      messages={props.messages}\n      selectedId={props.selectedId}\n      sendMessage={props.sendMessage}\n    />\n  );\n};\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    dialogs: state.dialogsPage.dialogs,\n    messages: state.dialogsPage.messages,\n    selectedId: state.dialogsPage.selectedId,\n    newDialog: state.dialogsPage.newDialog,\n    auth: state.auth,\n  };\n};\n\nlet mapDispatchToProps = {\n  getDialogs,\n  createNewDialog,\n  resetNewDialog,\n  getMessages,\n  sendMessage,\n  setSelectedDialog\n}\n\nexport default compose(\n  withAuthRedirect,\n  connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\n)(DialogsContainer);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkboxControl\":\"FormControls_checkboxControl__33VzZ\",\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"errorText\":\"FormControls_errorText__5Si0-\",\"fieldWrap\":\"FormControls_fieldWrap__e7QgK\",\"labelCheckboxWrap\":\"FormControls_labelCheckboxWrap__kXX0d\",\"labelTextWrap\":\"FormControls_labelTextWrap__nPV0n\"};","import { Field } from \"redux-form\";\nimport s from \"./FormControls.module.css\";\n\nexport const InputArea = ({ input, meta: {touched, error}, fieldType, ...props }) => {\n  const hasError = touched && error;\n\n  return (\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n      {props.label && props.type !== \"checkbox\" && (\n        <div className={`${s.labelTextWrap}`}>\n          <label htmlFor={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n      \n      <div className={s.fieldWrap}>\n        {fieldType === \"input\" ? (\n          <input {...input} {...props} />\n        ) : (\n          <textarea {...input} {...props} />\n        )}\n      </div>\n      {props.label && props.type === \"checkbox\" && (\n        <div className={s.labelCheckboxWrap}>\n          <label htmlFor={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n\n      {hasError ? (\n        <div className={s.errorText}>\n          <span>{error}</span>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport const createField = (\n  placeholder,\n  name,\n  validators,\n  component,\n  props\n) => {\n  let wrapClasses = props.wrapClasses || \"\";\n\n  if (props.type && props.type === \"checkbox\") {\n    wrapClasses += s.checkboxControl;\n  }\n\n  return (\n    <div className={wrapClasses}>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n    </div>\n  );\n};\n","import { connect } from \"react-redux\"\nimport { Navigate } from \"react-router-dom\"\n\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect= (Component) => {\n\n\n    let RedirectComponent = (props) => {\n\n        // console.log(props)\n\n        if(!props.isAuth) return <Navigate to={'/login'} />\n\n        return <Component {...props} />\n    }\n    \n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedRedirectComponent\n}","export const required = (value) => {\n    console.log('required')\n    if(value && value !== '') {\n        return undefined\n    }\n\n    return 'It is required field!'\n}\n\nexport const maxLength = (maxLengthValue) => {\n    return (value) => {\n        if(value && value.length > maxLengthValue) {\n            return `You have exceeded the maximum message length(${maxLengthValue})`\n        }\n        \n        return undefined\n    }\n}"],"names":["props","path","id","image","photos","small","defaultPhoto","className","s","src","alt","to","userName","newMessagesCount","ownershipClass","senderId","selectedId","body","maxLength300","maxLength","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","InputArea","fieldType","dialogsElements","newDialog","dialogs","map","d","messagesElements","messages","m","formData","sendMessage","userId","DialogsContainer","params","useParams","parseInt","setSelectedDialog","getDialogs","getMessages","useEffect","timerId","setInterval","clearTimeout","mapDispatchToProps","createNewDialog","resetNewDialog","compose","withAuthRedirect","connect","state","dialogsPage","auth","input","meta","touched","error","hasError","label","type","htmlFor","placeholder","name","validators","component","wrapClasses","Field","validate","mapStateToPropsForRedirect","isAuth","Component","value","console","log","maxLengthValue","length"],"sourceRoot":""}