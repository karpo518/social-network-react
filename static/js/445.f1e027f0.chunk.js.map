{"version":3,"file":"static/js/445.f1e027f0.chunk.js","mappings":"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","sources":["redux/profile-selectors.ts","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfilePage.tsx","utils/hooks/useRequireAuth.ts","webpack://my-app/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.tsx","utils/validators/validators.ts"],"sourcesContent":["import { TAppState } from './redux-store';\n\nexport const  sGetProfile = (state: TAppState) => {\n    return state.profilePage.profile\n}\n\nexport const  sGetStatus = (state: TAppState) => {\n    return state.profilePage.status\n}\n\nexport const sGetAuth = (state: TAppState) => {\n    return state.auth\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\",\"likesCount\":\"Post_likesCount__LXQiZ\"};","import s from \"./Post.module.css\";\nimport userPhoto from \"../../../../assets/images/user.jpg\";\nimport { FC } from \"react\";\nimport { TPost } from \"../../../../types/types\";\n\nconst Post: FC<TPost> = (props) => {\n\n  return (\n    <div className={s.item}>\n      <img src={userPhoto} alt={'author img'} />\n      {props.message}\n      <div>\n        <span className={s.likesCount} >{props.likesCount} like(s)</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n","import React, { FC } from \"react\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { TPost } from \"../../../types/types\";\nimport { maxLength, required } from \"../../../utils/validators/validators\";\nimport { createField, InputArea } from \"../../common/FormControls/FormControls\";\nimport s from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\n\nlet maxLength300 = maxLength(300)\n\ntype TProps = {\n  posts: Array<TPost>\n  sendPost: (newPostBody: string) => void\n}\n\nconst MyPosts = React.memo<TProps>((props) => {\n  \n  let postsElements = props.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount} /> );\n\n  let onSubmit = (formData: TFormData) => {\n    props.sendPost(formData.newPostBody);  \n  };\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My Posts</h3>\n      <AddPostFormRedux onSubmit={onSubmit} />\n      <div className={s.posts}>\n         { postsElements }\n      </div>\n    </div>\n  );\n});\n\ntype TFormData = {\n  newPostBody: string\n}\n\ntype TOwnProps = {\n  onSubmit: (FormData: any) => void\n}\n\ntype TFormProps = TOwnProps & InjectedFormProps<TFormData,TOwnProps>\n\nconst AddPostForm: FC<TFormProps> = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit} >\n\n      { createField<TFormData>('Write your message here..', 'newPostBody', [required, maxLength300], InputArea, {fieldType: 'textarea'}) }\n\n      <div>\n        <button >Add post</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddPostFormRedux = reduxForm<TFormData, TOwnProps>({ form: \"ProfileAddPostForm\" })(AddPostForm);\n\nexport default MyPosts;\n","import { connect } from \"react-redux\";\nimport {profileAC, sendPost } from \"../../../redux/profile-reducer\";\nimport { TAppState } from \"../../../redux/redux-store\";\nimport { TPost } from \"../../../types/types\";\nimport MyPosts from \"./MyPosts\";\n\ntype TMapStateProps = {\n  posts: Array<TPost>\n  newPostText: string\n}\n\ntype TMapDispatchProps = {\n  updateNewPostText: (newPostText: string) => void\n  sendPost: (formData: any) => void\n}\n\nlet mapStateToProps = (state: TAppState) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText\n  };\n}\n\nlet MapDispatchToProps = {\n  updateNewPostText: profileAC.updateNewPostText, \n  sendPost\n}\n\nconst MyPostsContainer = connect<TMapStateProps, TMapDispatchProps, {}, TAppState> (mapStateToProps, MapDispatchToProps) (MyPosts);\n\nexport default MyPostsContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"image\":\"ProfileInfo_image__Kkyc5\",\"avatar\":\"ProfileInfo_avatar__1VFcV\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"aboutItem\":\"ProfileInfo_aboutItem__J2FXl\",\"aboutTitle\":\"ProfileInfo_aboutTitle__zMikE\",\"contactsBlock\":\"ProfileInfo_contactsBlock__cVFdA\",\"contactList\":\"ProfileInfo_contactList__7p7ua\",\"description\":\"ProfileInfo_description__u7GZ5\",\"fullName\":\"ProfileInfo_fullName__3fR7R\",\"updateAvatarBtn\":\"ProfileInfo_updateAvatarBtn__PZG2t\",\"ownerImage\":\"ProfileInfo_ownerImage__bj3Hg\",\"startChatWrap\":\"ProfileInfo_startChatWrap__8wLSp\",\"profileDataForm\":\"ProfileInfo_profileDataForm__b+zKy\",\"form\":\"ProfileInfo_form__OSgA8\",\"fieldItem\":\"ProfileInfo_fieldItem__bAs7p\",\"editDataWrap\":\"ProfileInfo_editDataWrap__hRuvJ\",\"saveDataWrap\":\"ProfileInfo_saveDataWrap__ij-9O\",\"contactFieldWrap\":\"ProfileInfo_contactFieldWrap__-jneh\",\"errors\":\"ProfileInfo_errors__dIyFr\"};","import { ChangeEvent, FC, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { TProfileActions, updateStatus } from \"../../../redux/profile-reducer\";\nimport { TAppState } from \"../../../redux/redux-store\";\nimport s from \"./ProfileInfo.module.css\";\n\nexport type TProps = {\n  status: string\n}\n\nconst ProfileStatusWithHooks: FC<TProps> = (props) => {\n    let [editMode,setEditMode] = useState(false)\n    let [status,setStatus] = useState(props.status)\n    \n    const dispatch = useDispatch<ThunkDispatch<TAppState, unknown, TProfileActions>>();\n\n    useEffect(() => {\n        setStatus(props.status)\n    },[props.status])\n\n    const activateMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateMode = () => {\n        setEditMode(false)\n        dispatch(updateStatus(status))\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n    <div className={s.statusBlock}>\n      {editMode ? (\n        <div>\n          <input\n            autoFocus={true}\n            onBlur={ deactivateMode }\n            onChange={ onStatusChange }\n            type=\"text\"\n            value={status}\n          />\n        </div>\n      ) : (\n        <div>\n          <span onDoubleClick={ activateMode } >{status}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileStatusWithHooks;\n","import { FC } from \"react\"\nimport { TContacts, TProfile } from \"../../../types/types\"\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\"\nimport s from \"./ProfileInfo.module.css\";\n\ntype TProps = {\n    profile: TProfile\n    status: string\n    isOwner: boolean\n    activateProfileEditMode: () => void\n  }\n  \nconst ProfileData: FC<TProps> = ({profile, status, isOwner, activateProfileEditMode}) => {\n  \n    let availableContacts = Object.keys(profile.contacts).filter((k) => { return profile.contacts[k as keyof TContacts]  })\n  \n    return (\n      <div className={s.description}>\n        {isOwner && (\n          <div className={s.editDataWrap}>\n            <button onClick={activateProfileEditMode}>Edit</button>\n          </div>\n        )}\n        <div className={s.aboutItem}>\n          <div className={s.fullName}>{profile.fullName}</div>\n        </div>\n        <div className={s.aboutItem}>\n          <ProfileStatusWithHooks status={status} />\n        </div>\n        <div className={s.aboutItem}>\n          <span className={s.aboutTitle}>About me: </span>\n          {profile.aboutMe ? profile.aboutMe : \"-\"}\n        </div>\n        <div className={s.aboutItem}>\n          <span className={s.aboutTitle}>Looking for a job:</span>\n          {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        <div className={s.aboutItem}>\n          <div className={s.aboutTitle}>My professional skills:</div>\n          {profile.lookingForAJobDescription\n            ? profile.lookingForAJobDescription\n            : \"-\"}\n        </div>\n        {availableContacts.length > 0 && (\n          <div className={s.aboutItem}>\n            <div className={s.aboutTitle}>Контакты: </div>\n            <ul className={s.contactList}>\n              {availableContacts.map(function (title) {\n                return (\n                  <Contact\n                    key={title}\n                    contactTitle={title}\n                    contactValue={profile.contacts[title as keyof TContacts]}\n                  />\n                );\n              })}\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  type TContactProps = {\n  contactTitle: string\n  contactValue: string\n}\n\nconst Contact: FC<TContactProps> = ({contactTitle, contactValue}) => {\n  return (\n    <li>\n      <span className={s.aboutTitle}>{contactTitle}:</span>\n      <a href={`${contactValue}`} target=\"_blank\" rel=\"noreferrer\" >\n        {`${contactValue}`}\n      </a>\n    </li>\n  );\n}\n\nexport default ProfileData","import { FC } from \"react\";\nimport { Field, InjectedFormProps } from \"redux-form\";\nimport { reduxForm } from \"redux-form\";\nimport { TContacts, TProfile } from \"../../../types/types\";\nimport { createField, InputArea } from \"../../common/FormControls/FormControls\";\nimport s from \"./ProfileInfo.module.css\";\n\ntype TFormData = TProfile\n\ntype TContactsNames = Array<keyof TContacts & string>\n\ntype TOwnProps = {\n  profile: TProfile\n  initialValues: TProfile\n  onSubmit: (formData: any) => void\n}\n\ntype TProps = TOwnProps & InjectedFormProps<TFormData,TOwnProps>\n\nexport const ProfileDataForm: FC<TProps> = (props) => {\n\n  let contacts  = Object.keys(props.profile.contacts) as TContactsNames\n  \n  return (\n    <form onSubmit={props.handleSubmit} className={`${s.form} ${s.profileDataForm}` }>\n      <div className={s.saveDataWrap}>\n        <button>Save</button>\n      </div>\n\n      {props.error && <div className={s.errors} > {props.error}</div>}\n\n      <div className={s.fieldItem}>\n      <Field name=\"fullName\" component=\"input\" type=\"text\" placeholder=\"Full Name\"/>\n      </div>\n\n      <div className={s.fieldItem}>\n        { createField<TFormData>('About me', 'aboutMe', [], InputArea, {type: 'text', fieldType: 'textarea', 'label': 'About me'}) }\n      </div>\n\n      <div className={s.fieldItem}>\n      { createField<TFormData>(null, \n                    'lookingForAJob', \n                    [], \n                    InputArea, \n                    {type: 'checkbox', fieldType: 'input', label: 'Looking for a job', 'id': 'lookingForAJob' } ) \n      }\n      </div>\n\n      <div className={s.fieldItem}>\n        { createField<TFormData>('Details', 'lookingForAJobDescription', [], InputArea, {type: 'text', fieldType: 'textarea', 'label': 'My professional skills'}) }\n      </div>\n      <div className={s.aboutItem}>\n        <div className={s.aboutTitle}>Contacts: </div>\n        <div className={s.contactList}>\n          {contacts.map( (title) => {\n              return (\n                <div key={title} className={s.contactFieldWrap}>\n                  {createField<TFormData>(\n                    title,\n                    `contacts.${title}`,\n                    [],\n                    InputArea,\n                    { type: \"text\", fieldType: \"input\", label: title }\n                  )}\n                </div>\n              );\n          })}\n        </div>\n      </div>\n      \n\n\n    </form>\n  );\n};\n\nconst ProfileDataReduxForm = reduxForm<TFormData,TOwnProps>({ form: \"edit-profile\", enableReinitialize: true, destroyOnUnmount: false })(ProfileDataForm);\n\nexport default ProfileDataReduxForm;\n","import { ChangeEvent, FC, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport defaultPhoto from \"../../../assets/images/user.jpg\";\nimport { savePhoto, saveProfile, TProfileActions } from \"../../../redux/profile-reducer\";\nimport { sGetStatus } from \"../../../redux/profile-selectors\";\nimport { TAppState } from \"../../../redux/redux-store\";\nimport { TProfile } from \"../../../types/types\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileData from \"./ProfileData\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport s from \"./ProfileInfo.module.css\";\n\ntype TProps = {\n  profile: TProfile | null\n  isOwner: boolean\n}\n\nconst ProfileInfo: FC<TProps> = ({profile, isOwner }) => {\n\n  const status  = useSelector(sGetStatus)\n\n  const dispatch = useDispatch<ThunkDispatch<TAppState, unknown, TProfileActions>>();\n\n  const inputFileRef = useRef<HTMLInputElement>(null)\n\n  let [editMode,setEditMode] = useState(false)\n\n  if (!profile) {\n    return <Preloader />;\n  }\n\n  const onMainPhotoClicked = () => {\n    if (inputFileRef.current !== null) {\n      inputFileRef.current.click()\n    }\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if(e.target.files?.length) {\n      dispatch(savePhoto(e.target.files[0]))\n    }\n  }\n  const activateProfileEditMode = () => {\n    setEditMode(true)\n  }\n\n  const onSubmit = (formData: TProfile) => {\n    dispatch(saveProfile(formData)).then(() => setEditMode(false) )\n  };\n\n\n  return (\n    <div>\n      <div className={s.descriptionBlock}>\n        <div>\n          <img className={s.avatar + (isOwner ? ` ${s.ownerImage}` : '') } \n               src={profile.photos.large != null ? profile.photos.large : defaultPhoto} \n               alt={'Profile avatar'}\n               title={isOwner ? 'Click for uploading' : ''} \n               onClick={onMainPhotoClicked} />\n          {isOwner && (\n              <input className={s.updateAvatarBtn} ref={inputFileRef} type={'file'} onChange={onMainPhotoSelected} />\n            )\n          }\n        </div>\n        \n        {!isOwner && (\n            <div className={s.startChatWrap}>\n              <NavLink to={`/dialogs/${profile.userId}`} >Send message</NavLink>\n            </div>\n          )\n        }\n\n        {editMode \n            ? <ProfileDataForm initialValues={profile}\n                               profile={profile}\n                               onSubmit={onSubmit} />\n            : <ProfileData profile={profile} \n                           status={status} \n                           isOwner={isOwner}\n                           activateProfileEditMode={activateProfileEditMode} />\n        }\n\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","import { FC, useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { getUserProfile, getUserStatus, TProfileActions } from \"../../redux/profile-reducer\";\nimport { sGetProfile } from \"../../redux/profile-selectors\";\nimport { TAppState } from \"../../redux/redux-store\";\nimport { useRequireAuth } from \"../../utils/hooks/useRequireAuth\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nexport const ProfilePage:FC  = () =>  {\n\n  const profile = useSelector(sGetProfile)\n  const auth = useRequireAuth()\n\n  const dispatch = useDispatch<ThunkDispatch<TAppState, unknown, TProfileActions>>();\n\n  const navigate = useNavigate();\n  const params = useParams();\n\n  let userId = null as number | null \n  if(params.userId) {\n    userId = parseInt(params.userId)\n  }\n  else if(auth.userId) {\n    userId = auth.userId\n  }\n  else {\n    navigate('/login')\n  }\n\n  const getProfileData = useCallback( (userId: number) => {\n    dispatch(getUserProfile(userId))\n    dispatch(getUserStatus(userId))\n  },[dispatch])\n\n  useEffect(() => {\n    if(userId) {\n      getProfileData(userId)\n    }\n  },[userId, getProfileData])\n  \n\n    return (\n      <>\n      {\n        profile \n          ? <div>\n              <ProfileInfo isOwner={!params.userId} \n                           profile={profile} />\n              <MyPostsContainer />\n            </div>\n          : <div>Нет данных для отображения</div>\n      }\n      </>\n    );\n}\n","import { useSelector } from 'react-redux';\n// Hook (use-require-auth.js)\nimport { useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { sGetAuth } from '../../redux/profile-selectors';\n\n\n\nexport const useRequireAuth = (redirectUrl = '/login') => {\n  const auth = useSelector(sGetAuth);\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    if (auth.isAuth === false) {\n      return navigate(redirectUrl);\n    }\n  }, [auth, navigate, redirectUrl]);\n\n  return auth;\n}","// extracted by mini-css-extract-plugin\nexport default {\"checkboxControl\":\"FormControls_checkboxControl__33VzZ\",\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"errorText\":\"FormControls_errorText__5Si0-\",\"fieldWrap\":\"FormControls_fieldWrap__e7QgK\",\"labelCheckboxWrap\":\"FormControls_labelCheckboxWrap__kXX0d\",\"labelTextWrap\":\"FormControls_labelTextWrap__nPV0n\"};","import { Component, FC } from 'react';\nimport { Field, WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\nimport { NestedKeyOf } from '../../../types/types';\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\nimport s from \"./FormControls.module.css\";\n\ntype PropsType = {\n  input: WrappedFieldInputProps\n  meta: WrappedFieldMetaProps\n  fieldType: string\n  id?: string\n  label?: string \n  type: 'textarea' | 'input' | 'checkbox' \n}\n\nexport const InputArea: FC<PropsType> = ({ input, meta: {touched, error}, fieldType, ...props }) => {\n  const hasError = touched && error;\n  return (\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n      {props.label && props.type !== \"checkbox\" && (\n        <div className={`${s.labelTextWrap}`}>\n          <label htmlFor={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n      \n      <div className={s.fieldWrap}>\n        {fieldType === \"input\" ? (\n          <input {...input} {...props} />\n        ) : (\n          <textarea {...input} {...props} />\n        )}\n      </div>\n      {props.label && props.type === \"checkbox\" && (\n        <div className={s.labelCheckboxWrap}>\n          <label htmlFor={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n\n      {hasError ? (\n        <div className={s.errorText}>\n          <span>{error}</span>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport function  createField<TFormData extends object>(\n  placeholder: string | null,\n  name: NestedKeyOf<TFormData>,\n  validators: Array<FieldValidatorType>,\n  component: string | Component<any,any,any> | FC<any>,\n  props: any\n)\n{\n  let wrapClasses = props.wrapClasses || \"\";\n\n  if (props.type && props.type === \"checkbox\") {\n    wrapClasses += s.checkboxControl;\n  }\n\n  return (\n    <div className={wrapClasses}>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n    </div>\n  );\n};\n","export type FieldValidatorType = (field: string) => string | undefined\n\nexport const required: FieldValidatorType = (value: string): string | undefined => {\n    if(value && value !== '') {\n        return undefined\n    }\n\n    return 'It is required field!'\n}\n\nexport const maxLength = (maxLengthValue: number): FieldValidatorType => {\n    return (value) => {\n        if(value && value.length > maxLengthValue) {\n            return `You have exceeded the maximum message length(${maxLengthValue})`\n        }\n        \n        return undefined\n    }\n}"],"names":["sGetProfile","state","profilePage","profile","sGetStatus","status","sGetAuth","auth","props","className","s","src","userPhoto","alt","message","likesCount","maxLength300","maxLength","MyPosts","React","postsElements","posts","map","p","id","AddPostFormRedux","onSubmit","formData","sendPost","newPostBody","reduxForm","form","handleSubmit","createField","required","InputArea","fieldType","MapDispatchToProps","updateNewPostText","profileAC","connect","newPostText","useState","editMode","setEditMode","setStatus","dispatch","useDispatch","useEffect","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","type","onDoubleClick","Contact","contactTitle","contactValue","href","target","rel","isOwner","activateProfileEditMode","availableContacts","Object","keys","contacts","filter","k","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","length","title","enableReinitialize","destroyOnUnmount","error","Field","name","component","placeholder","label","useSelector","inputFileRef","useRef","Preloader","photos","large","defaultPhoto","current","click","ref","files","savePhoto","to","userId","initialValues","saveProfile","then","ProfilePage","redirectUrl","navigate","useNavigate","isAuth","useRequireAuth","params","useParams","parseInt","getProfileData","useCallback","getUserProfile","getUserStatus","input","meta","touched","hasError","htmlFor","validators","wrapClasses","validate","maxLengthValue"],"sourceRoot":""}