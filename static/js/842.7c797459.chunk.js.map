{"version":3,"file":"static/js/842.7c797459.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Login/Login.module.css?3530","components/Login/Login.jsx","components/Login/LoginContainer.jsx","webpack://my-app/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.js","utils/validators/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Login_form__xawx9\",\"checkbox\":\"Login_checkbox__oyLjX\",\"checkboxWrap\":\"Login_checkboxWrap__1PPoj\",\"formControl\":\"Login_formControl__Yj7cj\",\"submit\":\"Login_submit__zALlr\",\"fieldContent\":\"Login_fieldContent__vK+x2\",\"errors\":\"Login_errors__c6sx5\"};","import { reduxForm } from \"redux-form\";\nimport { required } from \"../../utils/validators/validators\";\nimport { createField, InputArea } from \"../common/FormControls/FormControls\";\nimport s from \"./Login.module.css\";\n\nconst LoginForm = (props) => {\n    return (\n    <form onSubmit={props.handleSubmit} className={s.form}>\n\n      { createField('E-mail', 'email', [required], InputArea, {type: 'text', fieldType: 'input'}) }\n      { createField('Password', 'password', [required], InputArea, {type: 'password', fieldType: 'input'}) }\n\n      { \n        !props.captchaUrl || \n        ( <div>\n            <div className={s.fieldContent}>\n                <img onClick={props.updateCaptchaUrl} src={props.captchaUrl} alt={'captcha text'} />\n            </div>\n            <div className={s.fieldControl} >\n                { createField('Image text', 'captcha', [required], InputArea, {type: 'text', fieldType: 'input'}) }\n            </div>\n        </div> )\n      }\n      <div>\n\n        { createField(null, 'rememberMe', [], InputArea, {type: 'checkbox', fieldType: 'input', label: 'Remember me', 'id': 'rememberMe' }) }\n\n      </div>\n      {props.error && <div className={s.errors} > {props.error}</div>}\n      <div>\n        <button className={s.submit}>Login</button>\n      </div>\n    </form>\n  );\n};\n\nconst LoginReduxForm = reduxForm({ form: \"login\" })(LoginForm);\n\nconst Login = ({isAuth,captchaUrl, login, updateCaptchaUrl}) => {\n  const onSubmit = (formData) => {\n    login(formData);\n  };\n\n  return (\n    <div>\n      <h1>Login</h1>\n      {isAuth ? (\n        <div>You are logged in already!</div>\n      ) : (\n        <LoginReduxForm captchaUrl={captchaUrl} updateCaptchaUrl={updateCaptchaUrl} onSubmit={onSubmit} />\n      )}\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { login, updateCaptchaUrl } from \"../../redux/auth-reducer\";\nimport { compose } from \"redux\";\nimport Login from \"./Login\";\n\nclass LoginContainer extends React.Component {\n  \n  render () {\n\n    return (\n      <>\n        <Login isAuth={this.props.isAuth} captchaUrl={this.props.captchaUrl} login={this.props.login} updateCaptchaUrl={this.props.updateCaptchaUrl} />\n      </>\n    );\n  };\n}\n\nlet mapStateToProps = (state) => ({\n  isAuth: state.auth.isAuth,\n  captchaUrl: state.auth.captchaUrl\n});\n\nexport default compose(\n  connect(mapStateToProps, {login,updateCaptchaUrl}),\n)(LoginContainer)\n","// extracted by mini-css-extract-plugin\nexport default {\"checkboxControl\":\"FormControls_checkboxControl__33VzZ\",\"formControl\":\"FormControls_formControl__Bze--\",\"error\":\"FormControls_error__rGNdT\",\"errorText\":\"FormControls_errorText__5Si0-\",\"fieldWrap\":\"FormControls_fieldWrap__e7QgK\",\"labelWrap\":\"FormControls_labelWrap__nm-sq\"};","import { Field } from \"redux-form\";\nimport s from \"./FormControls.module.css\";\n\nexport const InputArea = ({ input, meta: {touched, error}, fieldType, ...props }) => {\n  const hasError = touched && error;\n\n  return (\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n      <div className={s.fieldWrap}>\n        {fieldType === \"input\" ? (\n          <input {...input} {...props} />\n        ) : (\n          <textarea {...input} {...props} />\n        )}\n      </div>\n      {props.label && (\n        <div className={s.labelWrap}>\n          <label for={props.id || \"\"}>{props.label}</label>\n        </div>\n      )}\n\n      {hasError ? (\n        <div className={s.errorText}>\n          <span>{error}</span>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport const createField = (\n  placeholder,\n  name,\n  validators,\n  component,\n  props\n) => {\n  let wrapClasses = props.wrapClasses || \"\";\n\n  if (props.type && props.type === \"checkbox\") {\n    wrapClasses += s.checkboxControl;\n  }\n\n  return (\n    <div className={wrapClasses}>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n    </div>\n  );\n};\n","export const required = (value) => {\n    console.log('required')\n    if(value && value !== '') {\n        return undefined\n    }\n\n    return 'It is required field!'\n}\n\nexport const maxLength = (maxLengthValue) => {\n    return (value) => {\n        if(value && value.length > maxLengthValue) {\n            return `You have exceeded the maximum message length(${maxLengthValue})`\n        }\n        \n        return undefined\n    }\n}"],"names":["LoginReduxForm","reduxForm","form","props","onSubmit","handleSubmit","className","s","createField","required","InputArea","type","fieldType","captchaUrl","onClick","updateCaptchaUrl","src","alt","label","error","isAuth","login","formData","LoginContainer","this","React","compose","connect","state","auth","input","meta","touched","hasError","for","id","placeholder","name","validators","component","wrapClasses","Field","validate","value","console","log","maxLength","maxLengthValue","length"],"sourceRoot":""}